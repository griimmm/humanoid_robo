/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-10-22 09:52:55.533756
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
x0=IKcos(j[1]);
x1=IKcos(j[0]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[2]);
x6=((0.015)*x1);
x7=((0.01499999998125)*x3);
x8=(x2*x3);
x9=(x0*x2);
x10=(x0*x1);
x11=(x1*x3);
x12=(x0*x6);
x13=((7.499999990625e-7)*x8);
x14=((7.499999990625e-7)*x11);
x15=((0.015)*x9);
x16=(x15+x14);
IkReal x17=((1.0)*x13);
eetrans[0]=((((0.0980000000125)*x2))+((x5*(((((-1.019999998725e-5)*x8))+(((0.204)*x10))))))+(((-1.0)*x17))+(((0.088)*x11))+((x4*(((((0.204)*x11))+(((1.019999998725e-5)*x9))))))+(((0.034)*x1))+x12+((x5*(((((-1.0)*x3*x6))+(((-7.499999990625e-7)*x9))))))+((x4*(((((-1.0)*x17))+x12))))+(((4.3999999945e-6)*x9)));
eetrans[1]=((((0.088)*x8))+(((-0.0980000000125)*x1))+(((0.034)*x2))+((x5*(((((0.204)*x9))+(((1.019999998725e-5)*x11))))))+x16+((x4*(((((-1.019999998725e-5)*x10))+(((0.204)*x8))))))+((x16*x4))+(((-4.3999999945e-6)*x10))+((x5*(((((7.499999990625e-7)*x10))+(((-0.015)*x8)))))));
eetrans[2]=((0.369999500000001)+(((0.01499999998125)*x0*x5))+(((0.203999999745)*x3*x5))+x7+((x4*x7))+(((-0.203999999745)*x0*x4))+(((-0.08799999989)*x0)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=((-0.37)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.59522752318295)+(((27.3821195358476)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((-1.59522752318295)+(((27.3821195358476)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x18=IKasin(((-1.59522752318295)+(((27.3821195358476)*(pz*pz)))));
j2array[0]=((-1.47536175068539)+(((1.0)*x18)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.66623090290441)+(((-1.0)*x18)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x19=pz*pz;
IkReal x20=cj2*cj2;
IkReal x21=sj2*sj2;
IkReal x22=((865.051900951557)*x19);
IkReal x23=((10400.7576401477)*x19);
j1eval[0]=((1.0)+x22);
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x19))));
j1eval[2]=((2.28994252873563)+(((12.023275862069)*x20))+(((12.023275862069)*x21))+(((9036.80942735428)*cj2*x19))+sj2+((x21*x23))+(((10.4465517241379)*cj2))+((sj2*x22))+(((1980.91913755257)*x19))+((x20*x23)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x24=pz*pz;
IkReal x25=cj2*cj2;
IkReal x26=((13.6)*sj2);
IkReal x27=(cj2+x26);
IkReal x28=(cj2*x24);
j1eval[0]=((92.98)+(((-69019.6076705882)*x28))+(((-79567.4738495242)*x24*x25))+x27+((cj2*x26))+(((-15319.1079970732)*x24))+(((-91.98)*x25))+(((11764.7058529412)*sj2*x28))+(((5074.97115224914)*sj2*x24)));
j1eval[1]=((1.0)+(((-399.9999995)*cj2*pz))+(((-172.549019392157)*pz))+(((29.4117646691176)*pz*sj2))+x27);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x29=pz*pz;
IkReal x30=cj2*cj2;
IkReal x31=((13.6)*cj2);
IkReal x32=((2005.34758856952)*sj2);
IkReal x33=((29.4117646691176)*pz);
IkReal x34=(cj2*x29);
j1eval[0]=((-3.01856060606061)+((x29*x32))+sj2+(((-15.6784090909091)*x30))+(((147.452028571288)*x34))+(((-1.0)*x31))+(((13710.0896165584)*x29))+(((-13562.6375879871)*x29*x30))+((x32*x34))+(((2.31818181818182)*cj2*sj2)));
j1eval[1]=((5.86666666666667)+(((-1.0)*sj2))+(((399.9999995)*pz*sj2))+((cj2*x33))+x33+x31);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j1eval[0]=10.1407407411667;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j1eval[0]=18.7805874952615;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=3.41176470588235;
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x35=IKcos(j1);
IkReal x36=IKsin(j1);
evalcond[0]=((0.034)*x35);
evalcond[1]=((0.116)*x35);
evalcond[2]=((0.034)+(((-0.116)*x36)));
evalcond[3]=((0.04231999997354)+(((-0.00102)*x35))+(((-0.005984)*x36)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0.00736970853988834;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x37=IKcos(j1);
IkReal x38=IKsin(j1);
evalcond[0]=((0.034)*x37);
evalcond[1]=((0.116)*x37);
evalcond[2]=((0.116)+(((-0.034)*x38)));
evalcond[3]=((0.034)+(((-0.116)*x38)));
evalcond[4]=((0.04231999997354)+(((-0.00102)*x37))+(((-0.005984)*x38)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0.157558240445812;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x39=IKcos(j1);
IkReal x40=IKsin(j1);
evalcond[0]=((0.034)*x39);
evalcond[1]=((0.116)*x39);
evalcond[2]=((0.116)+(((-0.034)*x40)));
evalcond[3]=((0.034)+(((-0.116)*x40)));
evalcond[4]=((0.04231999997354)+(((-0.00102)*x39))+(((-0.005984)*x40)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x41=cj2*cj2;
IkReal x42=sj2*sj2*sj2;
IkReal x43=cj2*cj2*cj2;
IkReal x44=pz*pz;
IkReal x45=(cj2*sj2);
IkReal x46=(pz*sj2);
IkReal x47=((150000.0)*pz);
IkReal x48=((1.53e+17)*x44);
CheckValue<IkReal> x49=IKPowWithIntegerCheck(((-230304100575760.0)+(((76296000190740.0)*sj2))+(((-1.03762560259406e+15)*cj2))+(((176868000442170.0)*x45))+(((1.046025e+18)*x44))+(((-1.1961999029905e+15)*x41))+((sj2*x48))+((x45*x48))+(((1.125e+16)*cj2*x44))+(((-1.034775e+18)*x41*x44))),-1);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50=IKPowWithIntegerCheck(((29920.0000374)+(((2040000.0)*x46))+((cj2*x47))+(((69360.0000867)*cj2))+(((-5100.000006375)*sj2))+x47),-1);
if(!x50.valid){
continue;
}
if( IKabs(((x49.value)*(((-2.96520800741302e+15)+(((6.88500000860625e+15)*pz*x45))+(((530604001326510.0)*x42))+(((2.12241600265302e+17)*pz*x42))+(((-7.01040901752602e+15)*cj2))+(((-2.45310000306638e+15)*x46))+(((-4.6733625058417e+16)*pz*x43))+(((4.64688750580861e+16)*pz))+(((-1.05833925264585e+15)*sj2*x41))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((-1.51324650378312e+15)*x45))+(((7.09916941774792e+15)*x43))+(((-4.65648750582061e+16)*pz*x41))+(((2.93998680734997e+15)*x41))+(((3.44250000430313e+15)*x41*x46)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x50.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x41))+(((-413910.000517388)*x45)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x49.value)*(((-2.96520800741302e+15)+(((6.88500000860625e+15)*pz*x45))+(((530604001326510.0)*x42))+(((2.12241600265302e+17)*pz*x42))+(((-7.01040901752602e+15)*cj2))+(((-2.45310000306638e+15)*x46))+(((-4.6733625058417e+16)*pz*x43))+(((4.64688750580861e+16)*pz))+(((-1.05833925264585e+15)*sj2*x41))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((-1.51324650378312e+15)*x45))+(((7.09916941774792e+15)*x43))+(((-4.65648750582061e+16)*pz*x41))+(((2.93998680734997e+15)*x41))+(((3.44250000430313e+15)*x41*x46))))))+IKsqr(((x50.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x41))+(((-413910.000517388)*x45))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x49.value)*(((-2.96520800741302e+15)+(((6.88500000860625e+15)*pz*x45))+(((530604001326510.0)*x42))+(((2.12241600265302e+17)*pz*x42))+(((-7.01040901752602e+15)*cj2))+(((-2.45310000306638e+15)*x46))+(((-4.6733625058417e+16)*pz*x43))+(((4.64688750580861e+16)*pz))+(((-1.05833925264585e+15)*sj2*x41))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((-1.51324650378312e+15)*x45))+(((7.09916941774792e+15)*x43))+(((-4.65648750582061e+16)*pz*x41))+(((2.93998680734997e+15)*x41))+(((3.44250000430313e+15)*x41*x46))))), ((x50.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x41))+(((-413910.000517388)*x45))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x51=IKcos(j1);
IkReal x52=IKsin(j1);
IkReal x53=((0.99999999875)*pz);
IkReal x54=((0.204)*sj2);
IkReal x55=((0.204)*cj2);
IkReal x56=((0.015)*cj2);
IkReal x57=((0.015)*sj2);
IkReal x58=((0.015)*x52);
evalcond[0]=((-0.088)+(((-1.0)*x51*x53))+x57+(((-0.034)*x52))+(((-1.0)*x55)));
evalcond[1]=((0.015)+(((-1.0)*x52*x53))+x54+x56+(((0.034)*x51)));
evalcond[2]=((0.034)+(((-1.0)*x52*x57))+((x52*x55))+((x51*x54))+((x51*x56))+(((0.088)*x52))+(((0.015)*x51)));
evalcond[3]=((0.04231999997354)+(((-0.005984)*x52))+(((-0.9999999975)*(pz*pz)))+(((-0.00102)*x51))+(((0.0299999999625)*pz*x52))+(((-0.17599999978)*pz*x51)));
evalcond[4]=((((-1.0)*x51*x55))+x58+((x52*x54))+((x52*x56))+((x51*x57))+(((-1.0)*x53))+(((-0.088)*x51)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x59=pz*pz;
IkReal x60=cj2*cj2;
IkReal x61=cj2*cj2*cj2;
IkReal x62=sj2*sj2*sj2;
IkReal x63=(cj2*pz);
IkReal x64=((2.82988801414944e+17)*sj2);
IkReal x65=(pz*sj2);
IkReal x66=(cj2*sj2);
IkReal x67=(sj2*x60);
IkReal x68=(cj2*x59);
IkReal x69=(sj2*x59);
CheckValue<IkReal> x70=IKPowWithIntegerCheck(((1.93472784967364e+18)+(((-1.6556400041391e+21)*x59*x60))+(((2.080800010404e+16)*cj2))+(((1.05600000264e+20)*x69))+(((2.44800000612e+20)*x59*x66))+(((-3.187600007969e+20)*x59))+(((-1.9139198495696e+18)*x60))+x64+(((-1.4361600035904e+21)*x68))+((cj2*x64))),-1);
if(!x70.valid){
continue;
}
CheckValue<IkReal> x71=IKPowWithIntegerCheck(((0.015)+(((-2.58823529088235)*pz))+(((-5.9999999925)*x63))+(((0.441176470036765)*x65))+(((0.204)*sj2))+(((0.015)*cj2))),-1);
if(!x71.valid){
continue;
}
if( IKabs(((x70.value)*(((-4.88268290441341e+18)+(((-1.836000006885e+18)*pz*x62))+(((-1.15373750976869e+19)*cj2))+(((1.74546000654548e+19)*pz))+(((-2.87720641078952e+20)*sj2*x63))+(((-7.27851603639258e+17)*sj2))+(((-6.79194002546978e+19)*pz*x60))+(((-3.3591456125968e+20)*x60*x65))+(((2.774400006936e+20)*x68))+(((2.43090000911588e+19)*x63))+(((-7.47738002804018e+19)*pz*x61))+(((-2.0400000051e+19)*x69))+(((4.70397890351989e+18)*x60))+(((1.13586710967934e+19)*x61))+(((1.196800002992e+20)*x59))+(((8.48966404244832e+17)*x62))+(((-5.21740801956528e+19)*x65))+(((-1.69334280846671e+18)*x67))+(((-2.42119441210597e+18)*x66)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x71.value)*(((0.200382352941176)+(((-0.18)*x66))+(((-0.0776470588235294)*sj2))+(((1.21738235294118)*x60))+(((1.056)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x70.value)*(((-4.88268290441341e+18)+(((-1.836000006885e+18)*pz*x62))+(((-1.15373750976869e+19)*cj2))+(((1.74546000654548e+19)*pz))+(((-2.87720641078952e+20)*sj2*x63))+(((-7.27851603639258e+17)*sj2))+(((-6.79194002546978e+19)*pz*x60))+(((-3.3591456125968e+20)*x60*x65))+(((2.774400006936e+20)*x68))+(((2.43090000911588e+19)*x63))+(((-7.47738002804018e+19)*pz*x61))+(((-2.0400000051e+19)*x69))+(((4.70397890351989e+18)*x60))+(((1.13586710967934e+19)*x61))+(((1.196800002992e+20)*x59))+(((8.48966404244832e+17)*x62))+(((-5.21740801956528e+19)*x65))+(((-1.69334280846671e+18)*x67))+(((-2.42119441210597e+18)*x66))))))+IKsqr(((x71.value)*(((0.200382352941176)+(((-0.18)*x66))+(((-0.0776470588235294)*sj2))+(((1.21738235294118)*x60))+(((1.056)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x70.value)*(((-4.88268290441341e+18)+(((-1.836000006885e+18)*pz*x62))+(((-1.15373750976869e+19)*cj2))+(((1.74546000654548e+19)*pz))+(((-2.87720641078952e+20)*sj2*x63))+(((-7.27851603639258e+17)*sj2))+(((-6.79194002546978e+19)*pz*x60))+(((-3.3591456125968e+20)*x60*x65))+(((2.774400006936e+20)*x68))+(((2.43090000911588e+19)*x63))+(((-7.47738002804018e+19)*pz*x61))+(((-2.0400000051e+19)*x69))+(((4.70397890351989e+18)*x60))+(((1.13586710967934e+19)*x61))+(((1.196800002992e+20)*x59))+(((8.48966404244832e+17)*x62))+(((-5.21740801956528e+19)*x65))+(((-1.69334280846671e+18)*x67))+(((-2.42119441210597e+18)*x66))))), ((x71.value)*(((0.200382352941176)+(((-0.18)*x66))+(((-0.0776470588235294)*sj2))+(((1.21738235294118)*x60))+(((1.056)*cj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x72=IKcos(j1);
IkReal x73=IKsin(j1);
IkReal x74=((0.99999999875)*pz);
IkReal x75=((0.204)*sj2);
IkReal x76=((0.204)*cj2);
IkReal x77=((0.015)*cj2);
IkReal x78=((0.015)*sj2);
IkReal x79=((0.015)*x73);
evalcond[0]=((-0.088)+(((-1.0)*x76))+(((-0.034)*x73))+x78+(((-1.0)*x72*x74)));
evalcond[1]=((0.015)+x77+x75+(((-1.0)*x73*x74))+(((0.034)*x72)));
evalcond[2]=((0.034)+(((0.088)*x73))+(((-1.0)*x73*x78))+((x72*x77))+((x72*x75))+((x73*x76))+(((0.015)*x72)));
evalcond[3]=((0.04231999997354)+(((-0.00102)*x72))+(((0.0299999999625)*pz*x73))+(((-0.9999999975)*(pz*pz)))+(((-0.005984)*x73))+(((-0.17599999978)*pz*x72)));
evalcond[4]=((((-1.0)*x74))+(((-0.088)*x72))+x79+(((-1.0)*x72*x76))+((x72*x78))+((x73*x77))+((x73*x75)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x80=((1500000001875.0)*pz);
IkReal x81=((20400000025500.0)*pz);
CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(((-299200000748.0)+((sj2*x81))+(((-693600001734.0)*cj2))+((cj2*x80))+(((51000000127.5)*sj2))+x80)),IkReal(((-51000000127.5)+((sj2*x80))+(((-51000000127.5)*cj2))+(((-693600001734.0)*sj2))+(((-8800000011000.0)*pz))+(((-1.0)*cj2*x81)))),IKFAST_ATAN2_MAGTHRESH);
if(!x82.valid){
continue;
}
CheckValue<IkReal> x83=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x83.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x82.value)+(((1.5707963267949)*(x83.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x84=IKcos(j1);
IkReal x85=IKsin(j1);
IkReal x86=((0.99999999875)*pz);
IkReal x87=((0.204)*sj2);
IkReal x88=((0.204)*cj2);
IkReal x89=((0.015)*cj2);
IkReal x90=((0.015)*sj2);
IkReal x91=((0.015)*x85);
evalcond[0]=((-0.088)+(((-0.034)*x85))+x90+(((-1.0)*x84*x86))+(((-1.0)*x88)));
evalcond[1]=((0.015)+(((0.034)*x84))+x89+x87+(((-1.0)*x85*x86)));
evalcond[2]=((0.034)+((x84*x89))+((x84*x87))+((x85*x88))+(((0.015)*x84))+(((0.088)*x85))+(((-1.0)*x85*x90)));
evalcond[3]=((0.04231999997354)+(((-0.005984)*x85))+(((-0.00102)*x84))+(((-0.17599999978)*pz*x84))+(((-0.9999999975)*(pz*pz)))+(((0.0299999999625)*pz*x85)));
evalcond[4]=((((-0.088)*x84))+((x85*x89))+((x85*x87))+x91+(((-1.0)*x84*x88))+(((-1.0)*x86))+((x84*x90)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.59522752318295)+(((27.3821195358476)*(pz*pz))))) < -1-IKFAST_SINCOS_THRESH || (((-1.59522752318295)+(((27.3821195358476)*(pz*pz))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x92=IKasin(((-1.59522752318295)+(((27.3821195358476)*(pz*pz)))));
j2array[0]=((-1.47536175068539)+(((1.0)*x92)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.66623090290441)+(((-1.0)*x92)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x93=pz*pz;
IkReal x94=cj2*cj2;
IkReal x95=sj2*sj2;
IkReal x96=((865.051900951557)*x93);
IkReal x97=((10400.7576401477)*x93);
j1eval[0]=((1.0)+x96);
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x93))));
j1eval[2]=((2.28994252873563)+(((9036.80942735428)*cj2*x93))+sj2+(((10.4465517241379)*cj2))+(((12.023275862069)*x95))+(((12.023275862069)*x94))+(((1980.91913755257)*x93))+((x95*x97))+((x94*x97))+((sj2*x96)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x98=pz*pz;
IkReal x99=cj2*cj2;
IkReal x100=((13.6)*sj2);
IkReal x101=(cj2+x100);
IkReal x102=(cj2*x98);
j1eval[0]=((92.98)+((cj2*x100))+(((11764.7058529412)*sj2*x102))+(((-15319.1079970732)*x98))+(((-69019.6076705882)*x102))+(((-91.98)*x99))+x101+(((-79567.4738495242)*x98*x99))+(((5074.97115224914)*sj2*x98)));
j1eval[1]=((1.0)+(((-399.9999995)*cj2*pz))+(((-172.549019392157)*pz))+(((29.4117646691176)*pz*sj2))+x101);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x103=pz*pz;
IkReal x104=cj2*cj2;
IkReal x105=((13.6)*cj2);
IkReal x106=((2005.34758856952)*sj2);
IkReal x107=((29.4117646691176)*pz);
IkReal x108=(cj2*x103);
j1eval[0]=((-3.01856060606061)+(((-15.6784090909091)*x104))+sj2+((x106*x108))+(((-13562.6375879871)*x103*x104))+(((-1.0)*x105))+(((13710.0896165584)*x103))+((x103*x106))+(((147.452028571288)*x108))+(((2.31818181818182)*cj2*sj2)));
j1eval[1]=((5.86666666666667)+((cj2*x107))+(((-1.0)*sj2))+(((399.9999995)*pz*sj2))+x105+x107);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x109=((29.4117646691176)*pz);
IkReal x110=((13.6)+x109);
IkReal x111=((-1.0)+(((399.9999995)*pz)));
IkReal x112=((5.86666666666667)+x109);
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
IkReal x113=IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz))))));
IkReal x114=((x111*x111)+(x110*x110));
CheckValue<IkReal> x121=IKPowWithIntegerCheck(x113,-1);
if(!x121.valid){
continue;
}
IkReal x115=x121.value;
IkReal x116=(x112*x115);
IkReal x122 = x114;
if(IKabs(x122)==0){
continue;
}
IkReal x117=pow(x122,-0.5);
IkReal x118=((1.0)*x110*x117);
IkReal x119=(x111*x117);
if((((1.0)+(((-1.0)*(x116*x116))))) < -0.00001)
continue;
IkReal x120=IKsqrt(((1.0)+(((-1.0)*(x116*x116)))));
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(x110),IkReal(x111),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
if((x114) < -0.00001)
continue;
CheckValue<IkReal> x124=IKPowWithIntegerCheck(IKabs(IKsqrt(x114)),-1);
if(!x124.valid){
continue;
}
if( ((x112*(x124.value))) < -1-IKFAST_SINCOS_THRESH || ((x112*(x124.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst12=((((-1.0)*(x123.value)))+(((-1.0)*(IKasin((x112*(x124.value)))))));
IkReal gconst13=((((-1.0)*x118*x120))+(((-1.0)*x116*x119)));
IkReal gconst14=((((-1.0)*x116*x118))+((x119*x120)));
IkReal x125=((29.4117646691176)*pz);
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x127=IKPowWithIntegerCheck(IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz)))))),-1);
if(!x127.valid){
continue;
}
IkReal x126=x127.value;
if( ((((x125*x126))+(((5.86666666666667)*x126)))) < -1-IKFAST_SINCOS_THRESH || ((((x125*x126))+(((5.86666666666667)*x126)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(((13.6)+x125)),IkReal(((-1.0)+(((399.9999995)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((((x125*x126))+(((5.86666666666667)*x126)))))+(x128.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x129=((29.4118)*pz);
IkReal x130=((29.4117646691176)*pz);
IkReal x131=pz*pz;
IkReal x132=((13.6)+x130);
IkReal x133=((-1.0)+(((399.9999995)*pz)));
IkReal x134=((5.86666666666667)+x130);
IkReal x135=x113;
IkReal x136=((x132*x132)+(x133*x133));
CheckValue<IkReal> x144=IKPowWithIntegerCheck(x135,-1);
if(!x144.valid){
continue;
}
IkReal x137=x144.value;
IkReal x138=(x134*x137);
IkReal x145 = x136;
if(IKabs(x145)==0){
continue;
}
IkReal x139=pow(x145,-0.5);
if((x136) < -0.00001)
continue;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKabs(IKsqrt(x136)),-1);
if(!x146.valid){
continue;
}
IkReal x140=x146.value;
IkReal x141=((1.0)*x132*x139);
IkReal x142=(x133*x139);
if((((1.0)+(((-1.0)*(x138*x138))))) < -0.00001)
continue;
IkReal x143=IKsqrt(((1.0)+(((-1.0)*(x138*x138)))));
px=0;
py=0;
pp=x131;
sj2=gconst13;
cj2=gconst14;
if( ((x140*(((5.86666651022223)+x129)))) < -1-IKFAST_SINCOS_THRESH || ((x140*(((5.86666651022223)+x129)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x147 = IKatan2WithCheck(IkReal(((13.6)+x129)),IkReal(((-1.0)+(((400.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x147.valid){
continue;
}
j2=((((-1.0)*(IKasin((x140*(((5.86666651022223)+x129)))))))+(((-1.0)*(x147.value))));
CheckValue<IkReal> x148 = IKatan2WithCheck(IkReal(x132),IkReal(x133),IKFAST_ATAN2_MAGTHRESH);
if(!x148.valid){
continue;
}
if( ((x134*x140)) < -1-IKFAST_SINCOS_THRESH || ((x134*x140)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst12=((((-1.0)*(x148.value)))+(((-1.0)*(IKasin((x134*x140))))));
IkReal gconst13=((((-1.0)*x141*x143))+(((-1.0)*x138*x142)));
IkReal gconst14=(((x142*x143))+(((-1.0)*x138*x141)));
IkReal x149=pz*pz;
j1eval[0]=((1.0)+(((865.051900951557)*x149)));
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x149))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x150=pz*pz;
IkReal x151=gconst13*gconst13;
IkReal x152=gconst14*gconst14;
IkReal x153=gconst13*gconst13*gconst13;
IkReal x154=gconst14*gconst14*gconst14;
IkReal x155=(gconst14*pz);
IkReal x156=(gconst13*pz);
IkReal x157=(gconst13*gconst14);
IkReal x158=(gconst13*x150);
IkReal x159=(gconst14*x150);
CheckValue<IkReal> x160=IKPowWithIntegerCheck(((1.040400005202e+16)+(((-1.4361600035904e+21)*x159))+(((1.040400005202e+16)*x152))+(((2.82988801414944e+17)*gconst13))+(((1.92432384962162e+18)*x151))+(((-9.0000000225e+18)*x150*x151))+(((2.080800010404e+16)*gconst14))+(((2.44800000612e+20)*x150*x157))+(((-3.097600007744e+20)*x150))+(((1.05600000264e+20)*x158))+(((-1.6646400041616e+21)*x150*x152))+(((2.82988801414944e+17)*x157))),-1);
if(!x160.valid){
continue;
}
CheckValue<IkReal> x161=IKPowWithIntegerCheck(((0.015)+(((-2.58823529088235)*pz))+(((0.204)*gconst13))+(((0.441176470036765)*x156))+(((0.015)*gconst14))+(((-5.9999999925)*x155))),-1);
if(!x161.valid){
continue;
}
if( IKabs(((x160.value)*(((-2.692800013464e+16)+(((4.98042001867658e+19)*x151*x155))+(((-1.5177600075888e+17)*x152))+(((-7.27851603639258e+17)*gconst13))+(((-4.651200017442e+19)*pz*x152))+(((-2.0400000051e+19)*x158))+(((2.774400006936e+20)*x159))+(((-1.69334280846671e+18)*gconst13*x152))+(((-3.3591456125968e+20)*x152*x156))+(((2.14074000802777e+19)*pz*x151))+(((-5.21740801956528e+19)*x156))+(((-1.836000006885e+18)*pz*x153))+(((-1.162800005814e+17)*gconst14))+(((-2.5495200095607e+19)*x155))+(((8.48966404244832e+17)*x153))+(((-1.14210950971055e+19)*gconst14*x151))+(((-6.242400031212e+16)*x154))+(((-3.952800014823e+18)*pz))+(((1.196800002992e+20)*x150))+(((-2.4969600093636e+19)*pz*x154))+(((-4.85575490427877e+18)*x151))+(((-2.87720641078952e+20)*gconst13*x155))+(((-2.42119441210597e+18)*x157)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x161.value)*(((0.193764705882353)+(((1.224)*x152))+(((1.056)*gconst14))+(((-0.18)*x157))+(((0.00661764705882353)*x151))+(((-0.0776470588235294)*gconst13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x160.value)*(((-2.692800013464e+16)+(((4.98042001867658e+19)*x151*x155))+(((-1.5177600075888e+17)*x152))+(((-7.27851603639258e+17)*gconst13))+(((-4.651200017442e+19)*pz*x152))+(((-2.0400000051e+19)*x158))+(((2.774400006936e+20)*x159))+(((-1.69334280846671e+18)*gconst13*x152))+(((-3.3591456125968e+20)*x152*x156))+(((2.14074000802777e+19)*pz*x151))+(((-5.21740801956528e+19)*x156))+(((-1.836000006885e+18)*pz*x153))+(((-1.162800005814e+17)*gconst14))+(((-2.5495200095607e+19)*x155))+(((8.48966404244832e+17)*x153))+(((-1.14210950971055e+19)*gconst14*x151))+(((-6.242400031212e+16)*x154))+(((-3.952800014823e+18)*pz))+(((1.196800002992e+20)*x150))+(((-2.4969600093636e+19)*pz*x154))+(((-4.85575490427877e+18)*x151))+(((-2.87720641078952e+20)*gconst13*x155))+(((-2.42119441210597e+18)*x157))))))+IKsqr(((x161.value)*(((0.193764705882353)+(((1.224)*x152))+(((1.056)*gconst14))+(((-0.18)*x157))+(((0.00661764705882353)*x151))+(((-0.0776470588235294)*gconst13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x160.value)*(((-2.692800013464e+16)+(((4.98042001867658e+19)*x151*x155))+(((-1.5177600075888e+17)*x152))+(((-7.27851603639258e+17)*gconst13))+(((-4.651200017442e+19)*pz*x152))+(((-2.0400000051e+19)*x158))+(((2.774400006936e+20)*x159))+(((-1.69334280846671e+18)*gconst13*x152))+(((-3.3591456125968e+20)*x152*x156))+(((2.14074000802777e+19)*pz*x151))+(((-5.21740801956528e+19)*x156))+(((-1.836000006885e+18)*pz*x153))+(((-1.162800005814e+17)*gconst14))+(((-2.5495200095607e+19)*x155))+(((8.48966404244832e+17)*x153))+(((-1.14210950971055e+19)*gconst14*x151))+(((-6.242400031212e+16)*x154))+(((-3.952800014823e+18)*pz))+(((1.196800002992e+20)*x150))+(((-2.4969600093636e+19)*pz*x154))+(((-4.85575490427877e+18)*x151))+(((-2.87720641078952e+20)*gconst13*x155))+(((-2.42119441210597e+18)*x157))))), ((x161.value)*(((0.193764705882353)+(((1.224)*x152))+(((1.056)*gconst14))+(((-0.18)*x157))+(((0.00661764705882353)*x151))+(((-0.0776470588235294)*gconst13))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x162=IKcos(j1);
IkReal x163=IKsin(j1);
IkReal x164=((0.204)*gconst14);
IkReal x165=((0.015)*gconst13);
IkReal x166=((0.204)*gconst13);
IkReal x167=((0.99999999875)*pz);
IkReal x168=((0.015)*gconst14);
IkReal x169=(pz*x162);
evalcond[0]=((-0.088)+(((-1.0)*x164))+(((-0.034)*x163))+x165+(((-1.0)*x162*x167)));
evalcond[1]=((0.015)+(((-1.0)*x163*x167))+(((0.034)*x162))+x168+x166);
evalcond[2]=((0.034)+(((0.088)*x163))+(((-1.0)*x163*x165))+((x162*x166))+((x162*x168))+(((0.015)*x162))+((x163*x164)));
evalcond[3]=((0.04231999997354)+(((-0.005984)*x163))+(((0.0299999999625)*pz*x163))+(((-0.9999999975)*(pz*pz)))+(((-0.00102)*x162))+(((-0.17599999978)*x169)));
evalcond[4]=((((-1.0)*x167))+(((-0.088)*x162))+((x162*x165))+(((-1.0)*x162*x164))+(((0.015)*x163))+((x163*x166))+((x163*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x170=((1500000001875.0)*pz);
IkReal x171=((20400000025500.0)*pz);
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(((-299200000748.0)+((gconst14*x170))+(((51000000127.5)*gconst13))+(((-693600001734.0)*gconst14))+x170+((gconst13*x171)))),IkReal(((-51000000127.5)+(((-693600001734.0)*gconst13))+(((-1.0)*gconst14*x171))+(((-51000000127.5)*gconst14))+(((-8800000011000.0)*pz))+((gconst13*x170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
CheckValue<IkReal> x173=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x173.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x172.value)+(((1.5707963267949)*(x173.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x174=IKcos(j1);
IkReal x175=IKsin(j1);
IkReal x176=((0.204)*gconst14);
IkReal x177=((0.015)*gconst13);
IkReal x178=((0.204)*gconst13);
IkReal x179=((0.99999999875)*pz);
IkReal x180=((0.015)*gconst14);
IkReal x181=(pz*x174);
evalcond[0]=((-0.088)+(((-1.0)*x174*x179))+(((-0.034)*x175))+(((-1.0)*x176))+x177);
evalcond[1]=((0.015)+(((-1.0)*x175*x179))+x178+x180+(((0.034)*x174)));
evalcond[2]=((0.034)+(((-1.0)*x175*x177))+(((0.088)*x175))+((x174*x180))+((x175*x176))+((x174*x178))+(((0.015)*x174)));
evalcond[3]=((0.04231999997354)+(((0.0299999999625)*pz*x175))+(((-0.005984)*x175))+(((-0.9999999975)*(pz*pz)))+(((-0.00102)*x174))+(((-0.17599999978)*x181)));
evalcond[4]=((((-1.0)*x174*x176))+(((-1.0)*x179))+(((-0.088)*x174))+((x175*x178))+((x175*x180))+((x174*x177))+(((0.015)*x175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x182=((29.4117646691176)*pz);
IkReal x183=((13.6)+x182);
IkReal x184=((-1.0)+(((399.9999995)*pz)));
IkReal x185=((5.86666666666667)+x182);
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
IkReal x186=IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz))))));
IkReal x187=((x184*x184)+(x183*x183));
CheckValue<IkReal> x193=IKPowWithIntegerCheck(x186,-1);
if(!x193.valid){
continue;
}
IkReal x188=x193.value;
IkReal x189=(x185*x188);
IkReal x194 = x187;
if(IKabs(x194)==0){
continue;
}
IkReal x190=pow(x194,-0.5);
IkReal x191=((1.0)*x190);
if((((1.0)+(((-1.0)*(x189*x189))))) < -0.00001)
continue;
IkReal x192=IKsqrt(((1.0)+(((-1.0)*(x189*x189)))));
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(x183),IkReal(x184),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
if((x187) < -0.00001)
continue;
CheckValue<IkReal> x196=IKPowWithIntegerCheck(IKabs(IKsqrt(x187)),-1);
if(!x196.valid){
continue;
}
if( ((x185*(x196.value))) < -1-IKFAST_SINCOS_THRESH || ((x185*(x196.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x195.value)))+(IKasin((x185*(x196.value)))));
IkReal gconst16=(((x183*x191*x192))+(((-1.0)*x184*x189*x191)));
IkReal gconst17=((((-1.0)*x184*x191*x192))+(((-1.0)*x183*x189*x191)));
IkReal x197=((29.4117646691176)*pz);
IkReal x198=((13.6)+x197);
IkReal x199=((-1.0)+(((399.9999995)*pz)));
if((((x199*x199)+(x198*x198))) < -0.00001)
continue;
CheckValue<IkReal> x200=IKPowWithIntegerCheck(IKabs(IKsqrt(((x199*x199)+(x198*x198)))),-1);
if(!x200.valid){
continue;
}
if( (((x200.value)*(((5.86666666666667)+x197)))) < -1-IKFAST_SINCOS_THRESH || (((x200.value)*(((5.86666666666667)+x197)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x201 = IKatan2WithCheck(IkReal(x198),IkReal(x199),IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((x200.value)*(((5.86666666666667)+x197)))))))+(x201.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x202=((29.4118)*pz);
IkReal x203=((29.4117646691176)*pz);
IkReal x204=pz*pz;
IkReal x205=((13.6)+x203);
IkReal x206=((-1.0)+(((399.9999995)*pz)));
IkReal x207=((5.86666666666667)+x203);
IkReal x208=x186;
IkReal x209=((x205*x205)+(x206*x206));
CheckValue<IkReal> x216=IKPowWithIntegerCheck(x208,-1);
if(!x216.valid){
continue;
}
IkReal x210=x216.value;
IkReal x211=(x207*x210);
IkReal x217 = x209;
if(IKabs(x217)==0){
continue;
}
IkReal x212=pow(x217,-0.5);
IkReal x213=((1.0)*x212);
if((x209) < -0.00001)
continue;
CheckValue<IkReal> x218=IKPowWithIntegerCheck(IKabs(IKsqrt(x209)),-1);
if(!x218.valid){
continue;
}
IkReal x214=x218.value;
if((((1.0)+(((-1.0)*(x211*x211))))) < -0.00001)
continue;
IkReal x215=IKsqrt(((1.0)+(((-1.0)*(x211*x211)))));
px=0;
py=0;
pp=x204;
sj2=gconst16;
cj2=gconst17;
if( ((x214*(((5.86666651022223)+x202)))) < -1-IKFAST_SINCOS_THRESH || ((x214*(((5.86666651022223)+x202)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(((13.6)+x202)),IkReal(((-1.0)+(((400.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
j2=((3.14159265)+(IKasin((x214*(((5.86666651022223)+x202)))))+(((-1.0)*(x219.value))));
if( ((x207*x214)) < -1-IKFAST_SINCOS_THRESH || ((x207*x214)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x220 = IKatan2WithCheck(IkReal(x205),IkReal(x206),IKFAST_ATAN2_MAGTHRESH);
if(!x220.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(IKasin((x207*x214)))+(((-1.0)*(x220.value))));
IkReal gconst16=((((-1.0)*x206*x211*x213))+((x205*x213*x215)));
IkReal gconst17=((((-1.0)*x206*x213*x215))+(((-1.0)*x205*x211*x213)));
IkReal x221=pz*pz;
j1eval[0]=((1.0)+(((865.051900951557)*x221)));
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x221))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x222=pz*pz;
IkReal x223=gconst16*gconst16;
IkReal x224=gconst16*gconst16*gconst16;
IkReal x225=gconst17*gconst17;
IkReal x226=gconst17*gconst17*gconst17;
IkReal x227=(gconst16*gconst17);
IkReal x228=(gconst16*pz);
IkReal x229=(gconst17*pz);
IkReal x230=(pz*x225);
IkReal x231=(gconst17*x223);
IkReal x232=(gconst17*x222);
IkReal x233=(gconst16*x222);
CheckValue<IkReal> x234=IKPowWithIntegerCheck(((1.040400005202e+16)+(((-9.0000000225e+18)*x222*x223))+(((2.82988801414944e+17)*gconst16))+(((2.82988801414944e+17)*x227))+(((-1.4361600035904e+21)*x232))+(((1.05600000264e+20)*x233))+(((2.080800010404e+16)*gconst17))+(((1.040400005202e+16)*x225))+(((1.92432384962162e+18)*x223))+(((-1.6646400041616e+21)*x222*x225))+(((2.44800000612e+20)*x222*x227))+(((-3.097600007744e+20)*x222))),-1);
if(!x234.valid){
continue;
}
CheckValue<IkReal> x235=IKPowWithIntegerCheck(((0.015)+(((-2.58823529088235)*pz))+(((-5.9999999925)*x229))+(((0.204)*gconst16))+(((0.015)*gconst17))+(((0.441176470036765)*x228))),-1);
if(!x235.valid){
continue;
}
if( IKabs(((x234.value)*(((-2.692800013464e+16)+(((-6.242400031212e+16)*x226))+(((-3.3591456125968e+20)*x225*x228))+(((-1.836000006885e+18)*pz*x224))+(((-4.85575490427877e+18)*x223))+(((-5.21740801956528e+19)*x228))+(((-2.5495200095607e+19)*x229))+(((-2.87720641078952e+20)*pz*x227))+(((-7.27851603639258e+17)*gconst16))+(((1.196800002992e+20)*x222))+(((-1.5177600075888e+17)*x225))+(((-1.162800005814e+17)*gconst17))+(((-4.651200017442e+19)*x230))+(((2.14074000802777e+19)*pz*x223))+(((-2.4969600093636e+19)*pz*x226))+(((-3.952800014823e+18)*pz))+(((-1.14210950971055e+19)*x231))+(((-1.69334280846671e+18)*gconst16*x225))+(((-2.0400000051e+19)*x233))+(((2.774400006936e+20)*x232))+(((8.48966404244832e+17)*x224))+(((-2.42119441210597e+18)*x227))+(((4.98042001867658e+19)*x223*x229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x235.value)*(((0.193764705882353)+(((1.224)*x225))+(((0.00661764705882353)*x223))+(((1.056)*gconst17))+(((-0.18)*x227))+(((-0.0776470588235294)*gconst16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x234.value)*(((-2.692800013464e+16)+(((-6.242400031212e+16)*x226))+(((-3.3591456125968e+20)*x225*x228))+(((-1.836000006885e+18)*pz*x224))+(((-4.85575490427877e+18)*x223))+(((-5.21740801956528e+19)*x228))+(((-2.5495200095607e+19)*x229))+(((-2.87720641078952e+20)*pz*x227))+(((-7.27851603639258e+17)*gconst16))+(((1.196800002992e+20)*x222))+(((-1.5177600075888e+17)*x225))+(((-1.162800005814e+17)*gconst17))+(((-4.651200017442e+19)*x230))+(((2.14074000802777e+19)*pz*x223))+(((-2.4969600093636e+19)*pz*x226))+(((-3.952800014823e+18)*pz))+(((-1.14210950971055e+19)*x231))+(((-1.69334280846671e+18)*gconst16*x225))+(((-2.0400000051e+19)*x233))+(((2.774400006936e+20)*x232))+(((8.48966404244832e+17)*x224))+(((-2.42119441210597e+18)*x227))+(((4.98042001867658e+19)*x223*x229))))))+IKsqr(((x235.value)*(((0.193764705882353)+(((1.224)*x225))+(((0.00661764705882353)*x223))+(((1.056)*gconst17))+(((-0.18)*x227))+(((-0.0776470588235294)*gconst16))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x234.value)*(((-2.692800013464e+16)+(((-6.242400031212e+16)*x226))+(((-3.3591456125968e+20)*x225*x228))+(((-1.836000006885e+18)*pz*x224))+(((-4.85575490427877e+18)*x223))+(((-5.21740801956528e+19)*x228))+(((-2.5495200095607e+19)*x229))+(((-2.87720641078952e+20)*pz*x227))+(((-7.27851603639258e+17)*gconst16))+(((1.196800002992e+20)*x222))+(((-1.5177600075888e+17)*x225))+(((-1.162800005814e+17)*gconst17))+(((-4.651200017442e+19)*x230))+(((2.14074000802777e+19)*pz*x223))+(((-2.4969600093636e+19)*pz*x226))+(((-3.952800014823e+18)*pz))+(((-1.14210950971055e+19)*x231))+(((-1.69334280846671e+18)*gconst16*x225))+(((-2.0400000051e+19)*x233))+(((2.774400006936e+20)*x232))+(((8.48966404244832e+17)*x224))+(((-2.42119441210597e+18)*x227))+(((4.98042001867658e+19)*x223*x229))))), ((x235.value)*(((0.193764705882353)+(((1.224)*x225))+(((0.00661764705882353)*x223))+(((1.056)*gconst17))+(((-0.18)*x227))+(((-0.0776470588235294)*gconst16))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x236=IKcos(j1);
IkReal x237=IKsin(j1);
IkReal x238=((0.99999999875)*pz);
IkReal x239=((0.015)*gconst17);
IkReal x240=((0.204)*gconst17);
IkReal x241=((0.204)*gconst16);
IkReal x242=((0.015)*gconst16);
evalcond[0]=((-0.088)+(((-0.034)*x237))+x242+(((-1.0)*x236*x238))+(((-1.0)*x240)));
evalcond[1]=((0.015)+x239+x241+(((0.034)*x236))+(((-1.0)*x237*x238)));
evalcond[2]=((0.034)+(((0.088)*x237))+(((0.015)*x236))+((x237*x240))+((x236*x241))+(((-1.0)*x237*x242))+((x236*x239)));
evalcond[3]=((0.04231999997354)+(((-0.00102)*x236))+(((-0.17599999978)*pz*x236))+(((-0.005984)*x237))+(((-0.9999999975)*(pz*pz)))+(((0.0299999999625)*pz*x237)));
evalcond[4]=(((x237*x239))+(((0.015)*x237))+((x237*x241))+((x236*x242))+(((-0.088)*x236))+(((-1.0)*x236*x240))+(((-1.0)*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x243=((1500000001875.0)*pz);
IkReal x244=((20400000025500.0)*pz);
CheckValue<IkReal> x245 = IKatan2WithCheck(IkReal(((-299200000748.0)+((gconst16*x244))+(((51000000127.5)*gconst16))+(((-693600001734.0)*gconst17))+x243+((gconst17*x243)))),IkReal(((-51000000127.5)+((gconst16*x243))+(((-693600001734.0)*gconst16))+(((-1.0)*gconst17*x244))+(((-51000000127.5)*gconst17))+(((-8800000011000.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x245.valid){
continue;
}
CheckValue<IkReal> x246=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x246.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x245.value)+(((1.5707963267949)*(x246.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x247=IKcos(j1);
IkReal x248=IKsin(j1);
IkReal x249=((0.99999999875)*pz);
IkReal x250=((0.015)*gconst17);
IkReal x251=((0.204)*gconst17);
IkReal x252=((0.204)*gconst16);
IkReal x253=((0.015)*gconst16);
evalcond[0]=((-0.088)+(((-0.034)*x248))+x253+(((-1.0)*x247*x249))+(((-1.0)*x251)));
evalcond[1]=((0.015)+(((-1.0)*x248*x249))+x250+x252+(((0.034)*x247)));
evalcond[2]=((0.034)+((x248*x251))+(((0.015)*x247))+(((0.088)*x248))+(((-1.0)*x248*x253))+((x247*x250))+((x247*x252)));
evalcond[3]=((0.04231999997354)+(((-0.17599999978)*pz*x247))+(((-0.00102)*x247))+(((-0.9999999975)*(pz*pz)))+(((-0.005984)*x248))+(((0.0299999999625)*pz*x248)));
evalcond[4]=((((-0.088)*x247))+((x248*x252))+((x248*x250))+(((0.015)*x248))+(((-1.0)*x247*x251))+(((-1.0)*x249))+((x247*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x254=((1.0)+(((-399.9999995)*pz)));
IkReal x255=((1.0)+(((-172.549019392157)*pz)));
IkReal x256=((13.6)+(((29.4117646691176)*pz)));
IkReal x257=((1.0)*x254);
IkReal x258=((x254*x254)+(x256*x256));
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
IkReal x259=IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz))))));
CheckValue<IkReal> x265=IKPowWithIntegerCheck(x259,-1);
if(!x265.valid){
continue;
}
IkReal x260=x265.value;
IkReal x266 = x258;
if(IKabs(x266)==0){
continue;
}
IkReal x261=pow(x266,-0.5);
if((((1.0)+(((-1.0)*(x255*x255)*(x260*x260))))) < -0.00001)
continue;
IkReal x262=IKsqrt(((1.0)+(((-1.0)*(x255*x255)*(x260*x260)))));
IkReal x263=((1.0)*x255*x260*x261);
IkReal x264=(x261*x262);
if((x258) < -0.00001)
continue;
CheckValue<IkReal> x267=IKPowWithIntegerCheck(IKabs(IKsqrt(x258)),-1);
if(!x267.valid){
continue;
}
if( ((x255*(x267.value))) < -1-IKFAST_SINCOS_THRESH || ((x255*(x267.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x268 = IKatan2WithCheck(IkReal(x254),IkReal(x256),IKFAST_ATAN2_MAGTHRESH);
if(!x268.valid){
continue;
}
IkReal gconst18=((((-1.0)*(IKasin((x255*(x267.value))))))+(((-1.0)*(x268.value))));
IkReal gconst19=((((-1.0)*x256*x263))+(((-1.0)*x257*x264)));
IkReal gconst20=(((x256*x264))+(((-1.0)*x255*x257*x260*x261)));
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz)))))),-1);
if(!x270.valid){
continue;
}
IkReal x269=x270.value;
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x271 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x272.valid){
continue;
}
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x274.valid){
continue;
}
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x275.valid){
continue;
}
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if( (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) < -1-IKFAST_SINCOS_THRESH || (((((-172.549019392157)*pz*x269))+(((1.0)*x269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((1.0)+(((-399.9999995)*pz)))),IkReal(((13.6)+(((29.4117646691176)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
if((((((1.0)*j2*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+(((x271.value)*(x272.value)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(j2)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(x273.value)))+((j2*(j2)))+(((1.0)*(x274.value)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+((j2*(x275.value)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+(((x276.value)*(j2))))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((((1.0)*j2*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+(((x271.value)*(x272.value)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(j2)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(x273.value)))+((j2*(j2)))+(((1.0)*(x274.value)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+((j2*(x275.value)))+(((1.0)*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))*(IKasin(((((-172.549019392157)*pz*x269))+(((1.0)*x269)))))))+(((x276.value)*(j2))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x277=((1.0)+(((-399.9999995)*pz)));
IkReal x278=pz*pz;
IkReal x279=((1.0)+(((-172.549019392157)*pz)));
IkReal x280=((13.6)+(((29.4117646691176)*pz)));
IkReal x281=x258;
IkReal x282=x259;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(x282,-1);
if(!x290.valid){
continue;
}
IkReal x283=x290.value;
IkReal x291 = x281;
if(IKabs(x291)==0){
continue;
}
IkReal x284=pow(x291,-0.5);
if((x281) < -0.00001)
continue;
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKabs(IKsqrt(x281)),-1);
if(!x292.valid){
continue;
}
IkReal x285=x292.value;
IkReal x286=((1.0)*x277*x284);
if((((1.0)+(((-1.0)*(x279*x279)*(x283*x283))))) < -0.00001)
continue;
IkReal x287=IKsqrt(((1.0)+(((-1.0)*(x279*x279)*(x283*x283)))));
IkReal x288=((1.0)*x279*x283*x284);
IkReal x289=(x284*x287);
px=0;
py=0;
pp=x278;
sj2=gconst19;
cj2=gconst20;
CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal(((1.0)+(((-400.0)*pz)))),IkReal(((13.6)+(((29.4118)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x293.valid){
continue;
}
if( ((x285*(((1.0)+(((-172.549019174779)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x285*(((1.0)+(((-172.549019174779)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*(x293.value)))+(((-1.0)*(IKasin((x285*(((1.0)+(((-172.549019174779)*pz))))))))));
if( ((x279*x285)) < -1-IKFAST_SINCOS_THRESH || ((x279*x285)) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(x277),IkReal(x280),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
IkReal gconst18=((((-1.0)*(IKasin((x279*x285)))))+(((-1.0)*(x294.value))));
IkReal gconst19=((((-1.0)*x280*x288))+(((-1.0)*x286*x287)));
IkReal gconst20=((((-1.0)*x279*x283*x286))+((x280*x289)));
IkReal x295=pz*pz;
j1eval[0]=((1.0)+(((865.051900951557)*x295)));
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x295))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x296=gconst20*gconst20;
IkReal x297=gconst19*gconst19*gconst19;
IkReal x298=gconst19*gconst19;
IkReal x299=gconst20*gconst20*gconst20;
IkReal x300=pz*pz;
IkReal x301=(gconst19*gconst20);
IkReal x302=((150000.0)*pz);
IkReal x303=(gconst19*pz);
IkReal x304=((5.625e+15)*x300);
IkReal x305=((1.53e+17)*x300);
IkReal x306=((4.68180000585225e+16)*pz*x298);
CheckValue<IkReal> x307=IKPowWithIntegerCheck(((-223801600559504.0)+((x301*x305))+(((-1.20270240300676e+15)*x296))+(((1.0404e+18)*x298*x300))+(((76296000190740.0)*gconst19))+x304+(((1.125e+16)*gconst20*x300))+(((-6502500016256.25)*x298))+(((176868000442170.0)*x301))+((gconst19*x305))+(((-1.03762560259406e+15)*gconst20))+((x296*x304))),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308=IKPowWithIntegerCheck(((29920.0000374)+(((2040000.0)*x303))+x302+(((69360.0000867)*gconst20))+((gconst20*x302))+(((-5100.000006375)*gconst19))),-1);
if(!x308.valid){
continue;
}
if( IKabs(((x307.value)*(((69638800174097.0)+(((530604001326510.0)*x297))+(((-349125000436406.0)*pz))+(((-180375000225469.0)*gconst20*pz))+(((253125000316406.0)*pz*x296))+(((3.44250000430313e+15)*x296*x303))+(((-94860000237150.0)*x296))+x306+(((-3.03484680758712e+15)*x298))+(((-1.05833925264585e+15)*gconst19*x296))+(((-1.51324650378312e+15)*x301))+(((-7.13818441784546e+15)*gconst20*x298))+(((-39015000097537.5)*x299))+(((2.12241600265302e+17)*pz*x297))+(((84375000105468.8)*pz*x299))+(((127775400319439.0)*gconst20))+(((-2.45310000306638e+15)*x303))+((gconst20*x306))+(((6.88500000860625e+15)*pz*x301))+(((-469646251174116.0)*gconst19)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x308.value)*(((-13200.0000165)+(((-43800.00005475)*gconst20))+(((-340000.0)*pz))+(((-177270.000221588)*gconst19))+(((30600.00003825)*x298))+(((-30600.00003825)*x296))+(((-413910.000517388)*x301)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x307.value)*(((69638800174097.0)+(((530604001326510.0)*x297))+(((-349125000436406.0)*pz))+(((-180375000225469.0)*gconst20*pz))+(((253125000316406.0)*pz*x296))+(((3.44250000430313e+15)*x296*x303))+(((-94860000237150.0)*x296))+x306+(((-3.03484680758712e+15)*x298))+(((-1.05833925264585e+15)*gconst19*x296))+(((-1.51324650378312e+15)*x301))+(((-7.13818441784546e+15)*gconst20*x298))+(((-39015000097537.5)*x299))+(((2.12241600265302e+17)*pz*x297))+(((84375000105468.8)*pz*x299))+(((127775400319439.0)*gconst20))+(((-2.45310000306638e+15)*x303))+((gconst20*x306))+(((6.88500000860625e+15)*pz*x301))+(((-469646251174116.0)*gconst19))))))+IKsqr(((x308.value)*(((-13200.0000165)+(((-43800.00005475)*gconst20))+(((-340000.0)*pz))+(((-177270.000221588)*gconst19))+(((30600.00003825)*x298))+(((-30600.00003825)*x296))+(((-413910.000517388)*x301))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x307.value)*(((69638800174097.0)+(((530604001326510.0)*x297))+(((-349125000436406.0)*pz))+(((-180375000225469.0)*gconst20*pz))+(((253125000316406.0)*pz*x296))+(((3.44250000430313e+15)*x296*x303))+(((-94860000237150.0)*x296))+x306+(((-3.03484680758712e+15)*x298))+(((-1.05833925264585e+15)*gconst19*x296))+(((-1.51324650378312e+15)*x301))+(((-7.13818441784546e+15)*gconst20*x298))+(((-39015000097537.5)*x299))+(((2.12241600265302e+17)*pz*x297))+(((84375000105468.8)*pz*x299))+(((127775400319439.0)*gconst20))+(((-2.45310000306638e+15)*x303))+((gconst20*x306))+(((6.88500000860625e+15)*pz*x301))+(((-469646251174116.0)*gconst19))))), ((x308.value)*(((-13200.0000165)+(((-43800.00005475)*gconst20))+(((-340000.0)*pz))+(((-177270.000221588)*gconst19))+(((30600.00003825)*x298))+(((-30600.00003825)*x296))+(((-413910.000517388)*x301))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x309=IKcos(j1);
IkReal x310=IKsin(j1);
IkReal x311=((0.99999999875)*pz);
IkReal x312=((0.015)*gconst20);
IkReal x313=((0.204)*gconst20);
IkReal x314=((0.204)*gconst19);
IkReal x315=(gconst19*x309);
IkReal x316=((0.015)*x310);
evalcond[0]=((-0.088)+(((0.015)*gconst19))+(((-1.0)*x313))+(((-1.0)*x309*x311))+(((-0.034)*x310)));
evalcond[1]=((0.015)+(((-1.0)*x310*x311))+(((0.034)*x309))+x314+x312);
evalcond[2]=((0.034)+((x310*x313))+(((-1.0)*gconst19*x316))+((x309*x314))+((x309*x312))+(((0.015)*x309))+(((0.088)*x310)));
evalcond[3]=((0.04231999997354)+(((-0.17599999978)*pz*x309))+(((-0.9999999975)*(pz*pz)))+(((-0.00102)*x309))+(((0.0299999999625)*pz*x310))+(((-0.005984)*x310)));
evalcond[4]=(((x310*x312))+((x310*x314))+x316+(((-1.0)*x311))+(((0.015)*x315))+(((-1.0)*x309*x313))+(((-0.088)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x317=((1500000001875.0)*pz);
IkReal x318=((20400000025500.0)*pz);
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(((-299200000748.0)+(((51000000127.5)*gconst19))+((gconst20*x317))+(((-693600001734.0)*gconst20))+((gconst19*x318))+x317)),IkReal(((-51000000127.5)+((gconst19*x317))+(((-693600001734.0)*gconst19))+(((-1.0)*gconst20*x318))+(((-8800000011000.0)*pz))+(((-51000000127.5)*gconst20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
CheckValue<IkReal> x320=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x320.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x319.value)+(((1.5707963267949)*(x320.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x321=IKcos(j1);
IkReal x322=IKsin(j1);
IkReal x323=((0.99999999875)*pz);
IkReal x324=((0.015)*gconst20);
IkReal x325=((0.204)*gconst20);
IkReal x326=((0.204)*gconst19);
IkReal x327=(gconst19*x321);
IkReal x328=((0.015)*x322);
evalcond[0]=((-0.088)+(((-0.034)*x322))+(((-1.0)*x321*x323))+(((-1.0)*x325))+(((0.015)*gconst19)));
evalcond[1]=((0.015)+(((-1.0)*x322*x323))+x324+x326+(((0.034)*x321)));
evalcond[2]=((0.034)+((x322*x325))+(((-1.0)*gconst19*x328))+(((0.015)*x321))+(((0.088)*x322))+((x321*x324))+((x321*x326)));
evalcond[3]=((0.04231999997354)+(((0.0299999999625)*pz*x322))+(((-0.9999999975)*(pz*pz)))+(((-0.17599999978)*pz*x321))+(((-0.00102)*x321))+(((-0.005984)*x322)));
evalcond[4]=(((x322*x326))+((x322*x324))+(((-1.0)*x321*x325))+(((-1.0)*x323))+(((0.015)*x327))+x328+(((-0.088)*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x329=((1.0)+(((-399.9999995)*pz)));
IkReal x330=((1.0)+(((-172.549019392157)*pz)));
IkReal x331=((13.6)+(((29.4117646691176)*pz)));
IkReal x332=((x331*x331)+(x329*x329));
if((((185.96)+(((160865.051500952)*(pz*pz))))) < -0.00001)
continue;
IkReal x333=IKabs(IKsqrt(((185.96)+(((160865.051500952)*(pz*pz))))));
CheckValue<IkReal> x340=IKPowWithIntegerCheck(x333,-1);
if(!x340.valid){
continue;
}
IkReal x334=x340.value;
IkReal x341 = x332;
if(IKabs(x341)==0){
continue;
}
IkReal x335=pow(x341,-0.5);
IkReal x336=((1.0)*x329*x335);
if((((1.0)+(((-1.0)*(x330*x330)*(x334*x334))))) < -0.00001)
continue;
IkReal x337=IKsqrt(((1.0)+(((-1.0)*(x330*x330)*(x334*x334)))));
IkReal x338=((1.0)*x330*x334*x335);
IkReal x339=((1.0)*x335*x337);
if((x332) < -0.00001)
continue;
CheckValue<IkReal> x342=IKPowWithIntegerCheck(IKabs(IKsqrt(x332)),-1);
if(!x342.valid){
continue;
}
if( ((x330*(x342.value))) < -1-IKFAST_SINCOS_THRESH || ((x330*(x342.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x343 = IKatan2WithCheck(IkReal(x329),IkReal(x331),IKFAST_ATAN2_MAGTHRESH);
if(!x343.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(IKasin((x330*(x342.value))))+(((-1.0)*(x343.value))));
IkReal gconst22=(((x336*x337))+(((-1.0)*x331*x338)));
IkReal gconst23=((((-1.0)*x330*x334*x336))+(((-1.0)*x331*x339)));
IkReal x344=((1.0)+(((-399.9999995)*pz)));
IkReal x345=((13.6)+(((29.4117646691176)*pz)));
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x347=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x347.valid){
continue;
}
if( (((x347.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x347.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x349.valid){
continue;
}
CheckValue<IkReal> x350 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x350.valid){
continue;
}
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x351.valid){
continue;
}
if( (((x351.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x351.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x352=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x352.valid){
continue;
}
if( (((x352.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x352.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x353.valid){
continue;
}
if( (((x353.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x353.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x354.valid){
continue;
}
if( (((x354.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x354.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x355 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x355.valid){
continue;
}
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x356.valid){
continue;
}
if( (((x356.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x356.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x357=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x357.valid){
continue;
}
if( (((x357.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x357.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
if((((x345*x345)+(x344*x344))) < -0.00001)
continue;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(IKabs(IKsqrt(((x345*x345)+(x344*x344)))),-1);
if(!x358.valid){
continue;
}
if( (((x358.value)*(((1.0)+(((-172.549019392157)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x358.value)*(((1.0)+(((-172.549019392157)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x359 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
CheckValue<IkReal> x361 = IKatan2WithCheck(IkReal(x344),IkReal(x345),IKFAST_ATAN2_MAGTHRESH);
if(!x361.valid){
continue;
}
if((((9.86960440108936)+(((x346.value)*(j2)))+(((-3.14159265358979)*(j2)))+(((-1.0)*(IKasin(((x347.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(x348.value)))+((j2*(x349.value)))+(((-1.0)*(x350.value)*(IKasin(((x351.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((1.0)*(IKasin(((x352.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(IKasin(((x353.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+((j2*(j2)))+(((3.14159265358979)*(IKasin(((x354.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((-3.14159265358979)*(x355.value)))+(((-3.14159265358979)*j2))+(((-1.0)*(IKasin(((x356.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(j2)))+(((-1.0)*j2*(IKasin(((x357.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((3.14159265358979)*(IKasin(((x358.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((x359.value)*(x360.value)))+(((-3.14159265358979)*(x361.value))))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((x346.value)*(j2)))+(((-3.14159265358979)*(j2)))+(((-1.0)*(IKasin(((x347.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(x348.value)))+((j2*(x349.value)))+(((-1.0)*(x350.value)*(IKasin(((x351.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((1.0)*(IKasin(((x352.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(IKasin(((x353.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+((j2*(j2)))+(((3.14159265358979)*(IKasin(((x354.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((-3.14159265358979)*(x355.value)))+(((-3.14159265358979)*j2))+(((-1.0)*(IKasin(((x356.value)*(((1.0)+(((-172.549019392157)*pz)))))))*(j2)))+(((-1.0)*j2*(IKasin(((x357.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((3.14159265358979)*(IKasin(((x358.value)*(((1.0)+(((-172.549019392157)*pz)))))))))+(((x359.value)*(x360.value)))+(((-3.14159265358979)*(x361.value))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x362=((1.0)+(((-399.9999995)*pz)));
IkReal x363=pz*pz;
IkReal x364=((1.0)+(((-172.549019392157)*pz)));
IkReal x365=((13.6)+(((29.4117646691176)*pz)));
IkReal x366=x332;
IkReal x367=x333;
CheckValue<IkReal> x375=IKPowWithIntegerCheck(x367,-1);
if(!x375.valid){
continue;
}
IkReal x368=x375.value;
IkReal x369=(x364*x368);
IkReal x376 = x366;
if(IKabs(x376)==0){
continue;
}
IkReal x370=pow(x376,-0.5);
IkReal x371=((1.0)*x370);
if((x366) < -0.00001)
continue;
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKabs(IKsqrt(x366)),-1);
if(!x377.valid){
continue;
}
IkReal x372=x377.value;
IkReal x373=(x362*x371);
if((((1.0)+(((-1.0)*(x369*x369))))) < -0.00001)
continue;
IkReal x374=IKsqrt(((1.0)+(((-1.0)*(x369*x369)))));
px=0;
py=0;
pp=x363;
sj2=gconst22;
cj2=gconst23;
if( ((x372*(((1.0)+(((-172.549019174779)*pz)))))) < -1-IKFAST_SINCOS_THRESH || ((x372*(((1.0)+(((-172.549019174779)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal(((1.0)+(((-400.0)*pz)))),IkReal(((13.6)+(((29.4118)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
j2=((3.14159265)+(IKasin((x372*(((1.0)+(((-172.549019174779)*pz)))))))+(((-1.0)*(x378.value))));
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal(x362),IkReal(x365),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
if( ((x364*x372)) < -1-IKFAST_SINCOS_THRESH || ((x364*x372)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x379.value)))+(IKasin((x364*x372))));
IkReal gconst22=(((x373*x374))+(((-1.0)*x365*x369*x371)));
IkReal gconst23=((((-1.0)*x365*x371*x374))+(((-1.0)*x369*x373)));
IkReal x380=pz*pz;
j1eval[0]=((1.0)+(((865.051900951557)*x380)));
j1eval[1]=IKsign(((115600000289.0)+(((100000000000000.0)*x380))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x381=pz*pz;
IkReal x382=gconst22*gconst22;
IkReal x383=gconst23*gconst23*gconst23;
IkReal x384=gconst22*gconst22*gconst22;
IkReal x385=gconst23*gconst23;
IkReal x386=(gconst23*pz);
IkReal x387=(gconst22*pz);
IkReal x388=((2.82988801414944e+17)*gconst22);
IkReal x389=(gconst22*gconst23);
IkReal x390=(gconst22*x381);
IkReal x391=(gconst23*x381);
CheckValue<IkReal> x392=IKPowWithIntegerCheck(((1.040400005202e+16)+(((1.05600000264e+20)*x390))+(((-9.0000000225e+18)*x381*x382))+(((-3.097600007744e+20)*x381))+(((2.080800010404e+16)*gconst23))+(((1.040400005202e+16)*x385))+x388+(((2.44800000612e+20)*x381*x389))+(((1.92432384962162e+18)*x382))+((gconst23*x388))+(((-1.6646400041616e+21)*x381*x385))+(((-1.4361600035904e+21)*x391))),-1);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393=IKPowWithIntegerCheck(((0.015)+(((-2.58823529088235)*pz))+(((0.204)*gconst22))+(((-5.9999999925)*x386))+(((0.015)*gconst23))+(((0.441176470036765)*x387))),-1);
if(!x393.valid){
continue;
}
if( IKabs(((x392.value)*(((-2.692800013464e+16)+(((-4.85575490427877e+18)*x382))+(((-2.5495200095607e+19)*x386))+(((-2.42119441210597e+18)*x389))+(((2.774400006936e+20)*x391))+(((4.98042001867658e+19)*x382*x386))+(((-7.27851603639258e+17)*gconst22))+(((-1.69334280846671e+18)*gconst22*x385))+(((-2.4969600093636e+19)*pz*x383))+(((-2.0400000051e+19)*x390))+(((-1.836000006885e+18)*pz*x384))+(((-2.87720641078952e+20)*gconst22*x386))+(((-1.5177600075888e+17)*x385))+(((-1.162800005814e+17)*gconst23))+(((8.48966404244832e+17)*x384))+(((-3.952800014823e+18)*pz))+(((2.14074000802777e+19)*pz*x382))+(((-3.3591456125968e+20)*x385*x387))+(((1.196800002992e+20)*x381))+(((-6.242400031212e+16)*x383))+(((-4.651200017442e+19)*pz*x385))+(((-1.14210950971055e+19)*gconst23*x382))+(((-5.21740801956528e+19)*x387)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x393.value)*(((0.193764705882353)+(((1.224)*x385))+(((-0.18)*x389))+(((1.056)*gconst23))+(((0.00661764705882353)*x382))+(((-0.0776470588235294)*gconst22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x392.value)*(((-2.692800013464e+16)+(((-4.85575490427877e+18)*x382))+(((-2.5495200095607e+19)*x386))+(((-2.42119441210597e+18)*x389))+(((2.774400006936e+20)*x391))+(((4.98042001867658e+19)*x382*x386))+(((-7.27851603639258e+17)*gconst22))+(((-1.69334280846671e+18)*gconst22*x385))+(((-2.4969600093636e+19)*pz*x383))+(((-2.0400000051e+19)*x390))+(((-1.836000006885e+18)*pz*x384))+(((-2.87720641078952e+20)*gconst22*x386))+(((-1.5177600075888e+17)*x385))+(((-1.162800005814e+17)*gconst23))+(((8.48966404244832e+17)*x384))+(((-3.952800014823e+18)*pz))+(((2.14074000802777e+19)*pz*x382))+(((-3.3591456125968e+20)*x385*x387))+(((1.196800002992e+20)*x381))+(((-6.242400031212e+16)*x383))+(((-4.651200017442e+19)*pz*x385))+(((-1.14210950971055e+19)*gconst23*x382))+(((-5.21740801956528e+19)*x387))))))+IKsqr(((x393.value)*(((0.193764705882353)+(((1.224)*x385))+(((-0.18)*x389))+(((1.056)*gconst23))+(((0.00661764705882353)*x382))+(((-0.0776470588235294)*gconst22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x392.value)*(((-2.692800013464e+16)+(((-4.85575490427877e+18)*x382))+(((-2.5495200095607e+19)*x386))+(((-2.42119441210597e+18)*x389))+(((2.774400006936e+20)*x391))+(((4.98042001867658e+19)*x382*x386))+(((-7.27851603639258e+17)*gconst22))+(((-1.69334280846671e+18)*gconst22*x385))+(((-2.4969600093636e+19)*pz*x383))+(((-2.0400000051e+19)*x390))+(((-1.836000006885e+18)*pz*x384))+(((-2.87720641078952e+20)*gconst22*x386))+(((-1.5177600075888e+17)*x385))+(((-1.162800005814e+17)*gconst23))+(((8.48966404244832e+17)*x384))+(((-3.952800014823e+18)*pz))+(((2.14074000802777e+19)*pz*x382))+(((-3.3591456125968e+20)*x385*x387))+(((1.196800002992e+20)*x381))+(((-6.242400031212e+16)*x383))+(((-4.651200017442e+19)*pz*x385))+(((-1.14210950971055e+19)*gconst23*x382))+(((-5.21740801956528e+19)*x387))))), ((x393.value)*(((0.193764705882353)+(((1.224)*x385))+(((-0.18)*x389))+(((1.056)*gconst23))+(((0.00661764705882353)*x382))+(((-0.0776470588235294)*gconst22))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x394=IKcos(j1);
IkReal x395=IKsin(j1);
IkReal x396=((0.99999999875)*pz);
IkReal x397=((0.015)*gconst22);
IkReal x398=((0.015)*gconst23);
IkReal x399=((0.204)*gconst22);
IkReal x400=((0.204)*gconst23);
evalcond[0]=((-0.088)+(((-1.0)*x394*x396))+x397+(((-0.034)*x395))+(((-1.0)*x400)));
evalcond[1]=((0.015)+(((-1.0)*x395*x396))+(((0.034)*x394))+x399+x398);
evalcond[2]=((0.034)+((x394*x399))+((x394*x398))+(((-1.0)*x395*x397))+((x395*x400))+(((0.088)*x395))+(((0.015)*x394)));
evalcond[3]=((0.04231999997354)+(((-0.17599999978)*pz*x394))+(((-0.00102)*x394))+(((-0.9999999975)*(pz*pz)))+(((0.0299999999625)*pz*x395))+(((-0.005984)*x395)));
evalcond[4]=((((-1.0)*x396))+((x395*x398))+((x395*x399))+((x394*x397))+(((-1.0)*x394*x400))+(((-0.088)*x394))+(((0.015)*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x401=((1500000001875.0)*pz);
IkReal x402=((20400000025500.0)*pz);
CheckValue<IkReal> x403=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404 = IKatan2WithCheck(IkReal(((-299200000748.0)+((gconst22*x402))+(((51000000127.5)*gconst22))+(((-693600001734.0)*gconst23))+((gconst23*x401))+x401)),IkReal(((-51000000127.5)+((gconst22*x401))+(((-693600001734.0)*gconst22))+(((-1.0)*gconst23*x402))+(((-8800000011000.0)*pz))+(((-51000000127.5)*gconst23)))),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x403.value)))+(x404.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x405=IKcos(j1);
IkReal x406=IKsin(j1);
IkReal x407=((0.99999999875)*pz);
IkReal x408=((0.015)*gconst22);
IkReal x409=((0.015)*gconst23);
IkReal x410=((0.204)*gconst22);
IkReal x411=((0.204)*gconst23);
evalcond[0]=((-0.088)+(((-0.034)*x406))+x408+(((-1.0)*x405*x407))+(((-1.0)*x411)));
evalcond[1]=((0.015)+(((-1.0)*x406*x407))+(((0.034)*x405))+x409+x410);
evalcond[2]=((0.034)+((x405*x409))+(((0.088)*x406))+(((-1.0)*x406*x408))+((x405*x410))+(((0.015)*x405))+((x406*x411)));
evalcond[3]=((0.04231999997354)+(((0.0299999999625)*pz*x406))+(((-0.9999999975)*(pz*pz)))+(((-0.005984)*x406))+(((-0.17599999978)*pz*x405))+(((-0.00102)*x405)));
evalcond[4]=((((-0.088)*x405))+((x405*x408))+(((0.015)*x406))+((x406*x410))+((x406*x409))+(((-1.0)*x405*x411))+(((-1.0)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x412=cj2*cj2;
IkReal x413=sj2*sj2*sj2;
IkReal x414=cj2*cj2*cj2;
IkReal x415=pz*pz;
IkReal x416=(cj2*sj2);
IkReal x417=(pz*sj2);
IkReal x418=((150000.0)*pz);
IkReal x419=((1.53e+17)*x415);
CheckValue<IkReal> x420=IKPowWithIntegerCheck(((-230304100575760.0)+(((-1.1961999029905e+15)*x412))+(((176868000442170.0)*x416))+(((1.046025e+18)*x415))+((x416*x419))+(((76296000190740.0)*sj2))+(((-1.03762560259406e+15)*cj2))+((sj2*x419))+(((-1.034775e+18)*x412*x415))+(((1.125e+16)*cj2*x415))),-1);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(((29920.0000374)+(((2040000.0)*x417))+(((69360.0000867)*cj2))+(((-5100.000006375)*sj2))+x418+((cj2*x418))),-1);
if(!x421.valid){
continue;
}
if( IKabs(((x420.value)*(((-2.96520800741302e+15)+(((-4.6733625058417e+16)*pz*x414))+(((-4.65648750582061e+16)*pz*x412))+(((2.93998680734997e+15)*x412))+(((-7.01040901752602e+15)*cj2))+(((-1.05833925264585e+15)*sj2*x412))+(((-1.51324650378312e+15)*x416))+(((530604001326510.0)*x413))+(((2.12241600265302e+17)*pz*x413))+(((3.44250000430313e+15)*x412*x417))+(((4.64688750580861e+16)*pz))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((6.88500000860625e+15)*pz*x416))+(((7.09916941774792e+15)*x414))+(((-2.45310000306638e+15)*x417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x421.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x412))+(((-413910.000517388)*x416)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x420.value)*(((-2.96520800741302e+15)+(((-4.6733625058417e+16)*pz*x414))+(((-4.65648750582061e+16)*pz*x412))+(((2.93998680734997e+15)*x412))+(((-7.01040901752602e+15)*cj2))+(((-1.05833925264585e+15)*sj2*x412))+(((-1.51324650378312e+15)*x416))+(((530604001326510.0)*x413))+(((2.12241600265302e+17)*pz*x413))+(((3.44250000430313e+15)*x412*x417))+(((4.64688750580861e+16)*pz))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((6.88500000860625e+15)*pz*x416))+(((7.09916941774792e+15)*x414))+(((-2.45310000306638e+15)*x417))))))+IKsqr(((x421.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x412))+(((-413910.000517388)*x416))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x420.value)*(((-2.96520800741302e+15)+(((-4.6733625058417e+16)*pz*x414))+(((-4.65648750582061e+16)*pz*x412))+(((2.93998680734997e+15)*x412))+(((-7.01040901752602e+15)*cj2))+(((-1.05833925264585e+15)*sj2*x412))+(((-1.51324650378312e+15)*x416))+(((530604001326510.0)*x413))+(((2.12241600265302e+17)*pz*x413))+(((3.44250000430313e+15)*x412*x417))+(((4.64688750580861e+16)*pz))+(((-469646251174116.0)*sj2))+(((4.6637625058297e+16)*cj2*pz))+(((6.88500000860625e+15)*pz*x416))+(((7.09916941774792e+15)*x414))+(((-2.45310000306638e+15)*x417))))), ((x421.value)*(((17400.00002175)+(((-177270.000221588)*sj2))+(((-43800.00005475)*cj2))+(((-340000.0)*pz))+(((-61200.0000765)*x412))+(((-413910.000517388)*x416))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x422=IKcos(j1);
IkReal x423=IKsin(j1);
IkReal x424=((0.99999999875)*pz);
IkReal x425=((0.204)*sj2);
IkReal x426=((0.204)*cj2);
IkReal x427=((0.015)*cj2);
IkReal x428=((0.015)*sj2);
IkReal x429=((0.015)*x423);
evalcond[0]=((-0.088)+(((-1.0)*x422*x424))+(((-1.0)*x426))+x428+(((-0.034)*x423)));
evalcond[1]=((0.015)+(((0.034)*x422))+x427+x425+(((-1.0)*x423*x424)));
evalcond[2]=((0.034)+(((0.088)*x423))+(((0.015)*x422))+((x423*x426))+(((-1.0)*x423*x428))+((x422*x425))+((x422*x427)));
evalcond[3]=((0.04231999997354)+(((-0.00102)*x422))+(((0.0299999999625)*pz*x423))+(((-0.9999999975)*(pz*pz)))+(((-0.17599999978)*pz*x422))+(((-0.005984)*x423)));
evalcond[4]=((((-1.0)*x422*x426))+(((-1.0)*x424))+x429+((x423*x427))+((x423*x425))+((x422*x428))+(((-0.088)*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x430=pz*pz;
IkReal x431=cj2*cj2;
IkReal x432=cj2*cj2*cj2;
IkReal x433=sj2*sj2*sj2;
IkReal x434=(cj2*pz);
IkReal x435=((2.82988801414944e+17)*sj2);
IkReal x436=(pz*sj2);
IkReal x437=(cj2*sj2);
IkReal x438=(sj2*x431);
IkReal x439=(cj2*x430);
IkReal x440=(sj2*x430);
CheckValue<IkReal> x441=IKPowWithIntegerCheck(((1.93472784967364e+18)+(((2.080800010404e+16)*cj2))+(((-1.4361600035904e+21)*x439))+(((-1.9139198495696e+18)*x431))+x435+(((-3.187600007969e+20)*x430))+((cj2*x435))+(((2.44800000612e+20)*x430*x437))+(((1.05600000264e+20)*x440))+(((-1.6556400041391e+21)*x430*x431))),-1);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(((0.015)+(((-2.58823529088235)*pz))+(((0.441176470036765)*x436))+(((-5.9999999925)*x434))+(((0.204)*sj2))+(((0.015)*cj2))),-1);
if(!x442.valid){
continue;
}
if( IKabs(((x441.value)*(((-4.88268290441341e+18)+(((-3.3591456125968e+20)*x431*x436))+(((2.774400006936e+20)*x439))+(((-1.15373750976869e+19)*cj2))+(((1.196800002992e+20)*x430))+(((1.74546000654548e+19)*pz))+(((-1.836000006885e+18)*pz*x433))+(((-2.87720641078952e+20)*sj2*x434))+(((-7.47738002804018e+19)*pz*x432))+(((-7.27851603639258e+17)*sj2))+(((1.13586710967934e+19)*x432))+(((-5.21740801956528e+19)*x436))+(((-2.42119441210597e+18)*x437))+(((4.70397890351989e+18)*x431))+(((-2.0400000051e+19)*x440))+(((8.48966404244832e+17)*x433))+(((2.43090000911588e+19)*x434))+(((-6.79194002546978e+19)*pz*x431))+(((-1.69334280846671e+18)*x438)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x442.value)*(((0.200382352941176)+(((-0.0776470588235294)*sj2))+(((1.056)*cj2))+(((1.21738235294118)*x431))+(((-0.18)*x437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x441.value)*(((-4.88268290441341e+18)+(((-3.3591456125968e+20)*x431*x436))+(((2.774400006936e+20)*x439))+(((-1.15373750976869e+19)*cj2))+(((1.196800002992e+20)*x430))+(((1.74546000654548e+19)*pz))+(((-1.836000006885e+18)*pz*x433))+(((-2.87720641078952e+20)*sj2*x434))+(((-7.47738002804018e+19)*pz*x432))+(((-7.27851603639258e+17)*sj2))+(((1.13586710967934e+19)*x432))+(((-5.21740801956528e+19)*x436))+(((-2.42119441210597e+18)*x437))+(((4.70397890351989e+18)*x431))+(((-2.0400000051e+19)*x440))+(((8.48966404244832e+17)*x433))+(((2.43090000911588e+19)*x434))+(((-6.79194002546978e+19)*pz*x431))+(((-1.69334280846671e+18)*x438))))))+IKsqr(((x442.value)*(((0.200382352941176)+(((-0.0776470588235294)*sj2))+(((1.056)*cj2))+(((1.21738235294118)*x431))+(((-0.18)*x437))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x441.value)*(((-4.88268290441341e+18)+(((-3.3591456125968e+20)*x431*x436))+(((2.774400006936e+20)*x439))+(((-1.15373750976869e+19)*cj2))+(((1.196800002992e+20)*x430))+(((1.74546000654548e+19)*pz))+(((-1.836000006885e+18)*pz*x433))+(((-2.87720641078952e+20)*sj2*x434))+(((-7.47738002804018e+19)*pz*x432))+(((-7.27851603639258e+17)*sj2))+(((1.13586710967934e+19)*x432))+(((-5.21740801956528e+19)*x436))+(((-2.42119441210597e+18)*x437))+(((4.70397890351989e+18)*x431))+(((-2.0400000051e+19)*x440))+(((8.48966404244832e+17)*x433))+(((2.43090000911588e+19)*x434))+(((-6.79194002546978e+19)*pz*x431))+(((-1.69334280846671e+18)*x438))))), ((x442.value)*(((0.200382352941176)+(((-0.0776470588235294)*sj2))+(((1.056)*cj2))+(((1.21738235294118)*x431))+(((-0.18)*x437))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x443=IKcos(j1);
IkReal x444=IKsin(j1);
IkReal x445=((0.99999999875)*pz);
IkReal x446=((0.204)*sj2);
IkReal x447=((0.204)*cj2);
IkReal x448=((0.015)*cj2);
IkReal x449=((0.015)*sj2);
IkReal x450=((0.015)*x444);
evalcond[0]=((-0.088)+(((-1.0)*x447))+(((-1.0)*x443*x445))+x449+(((-0.034)*x444)));
evalcond[1]=((0.015)+(((-1.0)*x444*x445))+(((0.034)*x443))+x448+x446);
evalcond[2]=((0.034)+(((-1.0)*x444*x449))+(((0.088)*x444))+(((0.015)*x443))+((x444*x447))+((x443*x448))+((x443*x446)));
evalcond[3]=((0.04231999997354)+(((0.0299999999625)*pz*x444))+(((-0.00102)*x443))+(((-0.9999999975)*(pz*pz)))+(((-0.005984)*x444))+(((-0.17599999978)*pz*x443)));
evalcond[4]=((((-1.0)*x445))+(((-1.0)*x443*x447))+x450+((x444*x446))+((x444*x448))+(((-0.088)*x443))+((x443*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x451=((1500000001875.0)*pz);
IkReal x452=((20400000025500.0)*pz);
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal(((-299200000748.0)+((sj2*x452))+(((-693600001734.0)*cj2))+(((51000000127.5)*sj2))+((cj2*x451))+x451)),IkReal(((-51000000127.5)+((sj2*x451))+(((-51000000127.5)*cj2))+(((-693600001734.0)*sj2))+(((-8800000011000.0)*pz))+(((-1.0)*cj2*x452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign(((115600000289.0)+(((100000000000000.0)*(pz*pz))))),-1);
if(!x454.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x453.value)+(((1.5707963267949)*(x454.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x455=IKcos(j1);
IkReal x456=IKsin(j1);
IkReal x457=((0.99999999875)*pz);
IkReal x458=((0.204)*sj2);
IkReal x459=((0.204)*cj2);
IkReal x460=((0.015)*cj2);
IkReal x461=((0.015)*sj2);
IkReal x462=((0.015)*x456);
evalcond[0]=((-0.088)+(((-0.034)*x456))+(((-1.0)*x459))+x461+(((-1.0)*x455*x457)));
evalcond[1]=((0.015)+(((-1.0)*x456*x457))+x458+x460+(((0.034)*x455)));
evalcond[2]=((0.034)+((x455*x460))+((x455*x458))+(((-1.0)*x456*x461))+(((0.088)*x456))+(((0.015)*x455))+((x456*x459)));
evalcond[3]=((0.04231999997354)+(((-0.005984)*x456))+(((-0.00102)*x455))+(((-0.9999999975)*(pz*pz)))+(((-0.17599999978)*pz*x455))+(((0.0299999999625)*pz*x456)));
evalcond[4]=(((x456*x460))+((x455*x461))+(((-1.0)*x457))+x462+(((-1.0)*x455*x459))+(((-0.088)*x455))+((x456*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal(((0.99999999875)*py)),IkReal(((-0.99999999875)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
IkReal x463=((1.0)*(x465.value));
if((((((0.9999999975)*(px*px)))+(((0.9999999975)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x466=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.9999999975)*(px*px)))+(((0.9999999975)*(py*py)))))),-1);
if(!x466.valid){
continue;
}
if( (((0.097999999865)*(x466.value))) < -1-IKFAST_SINCOS_THRESH || (((0.097999999865)*(x466.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x464=IKasin(((0.097999999865)*(x466.value)));
j0array[0]=((((-1.0)*x463))+(((-1.0)*x464)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((1.0)*x464))+(((-1.0)*x463)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x467=px*px;
IkReal x468=cj0*cj0;
IkReal x469=py*py;
IkReal x470=(cj0*px);
IkReal x471=(py*sj0);
IkReal x472=((6.84552988396191e-8)*x468);
if( (((-1.59522752318295)+(((1.36910597679238e-7)*x470*x471))+(((27.3821196043029)*x469))+(((-1.0)*x469*x472))+(((27.3821195358476)*x467))+(((27.3821195358476)*(pz*pz)))+((x467*x472))+(((-1.8619841330926)*x471))+(((-1.8619841330926)*x470)))) < -1-IKFAST_SINCOS_THRESH || (((-1.59522752318295)+(((1.36910597679238e-7)*x470*x471))+(((27.3821196043029)*x469))+(((-1.0)*x469*x472))+(((27.3821195358476)*x467))+(((27.3821195358476)*(pz*pz)))+((x467*x472))+(((-1.8619841330926)*x471))+(((-1.8619841330926)*x470)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x473=IKasin(((-1.59522752318295)+(((1.36910597679238e-7)*x470*x471))+(((27.3821196043029)*x469))+(((-1.0)*x469*x472))+(((27.3821195358476)*x467))+(((27.3821195358476)*(pz*pz)))+((x467*x472))+(((-1.8619841330926)*x471))+(((-1.8619841330926)*x470))));
j2array[0]=((-1.47536175068539)+(((1.0)*x473)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.66623090290441)+(((-1.0)*x473)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x474=py*py;
IkReal x475=cj0*cj0;
IkReal x476=pz*pz;
IkReal x477=px*px;
IkReal x478=(cj0*px);
IkReal x479=(py*sj0);
IkReal x480=(x474*x475);
IkReal x481=(x475*x477);
j1eval[0]=((-1.0)+(((58.8235294117647)*x478))+(((58.8235294117647)*x479))+(((-865.051903114187)*x474))+(((-865.051900951557)*x476))+(((865.051903114187)*x480))+(((-1730.10380622837)*x478*x479))+(((-865.051903114187)*x481)));
j1eval[1]=IKsign(((-462400.001156)+(((-400000001.0)*x474))+(((-400000000.0)*x476))+(((400000001.0)*x480))+(((-400000001.0)*x481))+(((-800000002.0)*x478*x479))+(((27200000.068)*x479))+(((27200000.068)*x478))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x482=cj2*cj2;
IkReal x483=cj0*cj0;
IkReal x484=py*py;
IkReal x485=px*px;
IkReal x486=pz*pz;
IkReal x487=((13.6)*cj2);
IkReal x488=((1.0)*sj2);
IkReal x489=(cj0*px);
IkReal x490=((400.0)*cj2);
IkReal x491=(py*sj0);
IkReal x492=(cj2*sj2);
IkReal x493=((800.0)*cj2);
IkReal x494=((29.4117646691176)*pz);
IkReal x495=((58.8235294117647)*sj2);
IkReal x496=((29.4117647058824)*sj2);
IkReal x497=((11764.7058823529)*cj2);
IkReal x498=((2005.34758856952)*x486);
IkReal x499=((2611.21159693824)*x483);
IkReal x500=((2005.34759358289)*x484);
IkReal x501=((922.25935828877)*x482);
IkReal x502=((13562.6376218937)*x482);
IkReal x503=((865.051903114187)*sj2*x483);
IkReal x504=(x483*x485);
IkReal x505=(x483*x484);
j1eval[0]=((3.01856060606061)+(((-1.0)*x489*x501))+(((-177.5623885918)*x489))+(((136.363636363636)*x489*x492))+(((15.6784090909091)*x482))+(((-2.31818181818182)*x492))+((x491*x495))+(((-1.0)*sj2*x498))+(((-1.0)*x488))+((x483*x492*x500))+(((-177.5623885918)*x491))+(((-1.0)*x489*x493))+((x497*x504))+(((-1.0)*x491*x493))+(((136.363636363636)*x491*x492))+(((27125.2752437874)*x482*x489*x491))+((x489*x495))+(((-1.0)*x497*x505))+(((-147.452028571288)*cj2*x486))+(((23529.4117647059)*cj2*x489*x491))+(((-2005.34759358289)*x492*x504))+(((-13710.0896165584)*x486))+(((-1.0)*x502*x505))+(((-1.0)*x485*x503))+(((-1.0)*x491*x501))+((x484*x503))+((x484*x502))+x487+(((13562.6375879871)*x482*x486))+((x502*x504))+(((-1.0)*x492*x500))+(((2611.21159693824)*x484))+(((-1.0)*x484*x499))+((x485*x499))+((x484*x497))+(((-1730.10380622837)*sj2*x489*x491))+(((-865.051903114187)*sj2*x484))+(((-1.0)*x492*x498))+(((-4010.69518716578)*x489*x491*x492))+(((5222.42319387648)*x489*x491)));
j1eval[1]=((5.86666666666667)+((x491*x496))+(((-1.0)*x488))+(((-1.0)*x489*x490))+((x489*x496))+(((399.9999995)*pz*sj2))+(((-1.0)*x490*x491))+(((-172.549019607843)*x489))+x487+x494+(((-172.549019607843)*x491))+((cj2*x494)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x506=cj0*cj0;
IkReal x507=cj2*cj2;
IkReal x508=py*py;
IkReal x509=pz*pz;
IkReal x510=px*px;
IkReal x511=((13.6)*sj2);
IkReal x512=(py*sj0);
IkReal x513=((800.0)*sj2);
IkReal x514=(cj0*px);
IkReal x515=(cj2*sj2);
IkReal x516=((29.4117647058824)*cj2);
IkReal x517=((58.8235294117647)*cj2);
IkReal x518=((400.0)*sj2);
IkReal x519=((5410.58823529412)*x507);
IkReal x520=((11764.7058823529)*x506);
IkReal x521=((79567.4740484429)*x507);
IkReal x522=((11764.7058823529)*x508);
IkReal x523=((80432.5259515571)*x508);
IkReal x524=(x506*x510);
IkReal x525=((865.051903114187)*cj2*x508);
j1eval[0]=((-92.98)+(((-1.0)*x506*x508*x521))+(((-160865.051903114)*x512*x514))+(((-865.051903114187)*cj2*x524))+(((-1730.10380622837)*cj2*x512*x514))+(((-1.0)*x510*x515*x520))+(((-1.0)*x514*x519))+((cj2*x512*x513))+(((5469.41176470588)*x512))+(((5469.41176470588)*x514))+(((-1.0)*sj2*x522))+((cj2*x513*x514))+(((-80432.5259515571)*x524))+((x514*x517))+(((-1.0)*cj2*x511))+(((-5074.97115224914)*sj2*x509))+(((79567.4738495242)*x507*x509))+(((-1.0)*x523))+(((-1.0)*x525))+((x513*x514))+((x508*x521))+(((-1.0)*x512*x519))+((x512*x517))+((x512*x513))+(((-23529.4117647059)*x512*x514*x515))+((x521*x524))+(((-1.0)*x515*x522))+(((15319.1079970732)*x509))+(((-11764.7058529412)*x509*x515))+(((159134.948096886)*x507*x512*x514))+((x508*x515*x520))+((sj2*x508*x520))+((x506*x525))+((x506*x523))+(((69019.6076705882)*cj2*x509))+(((-1.0)*x511))+(((91.98)*x507))+(((-1.0)*sj2*x510*x520))+(((-23529.4117647059)*sj2*x512*x514))+(((-1.0)*cj2)));
j1eval[1]=((1.0)+cj2+(((-399.9999995)*cj2*pz))+(((-1.0)*x514*x516))+(((-1.0)*x514*x518))+(((-172.549019392157)*pz))+(((29.4117646691176)*pz*sj2))+(((-29.4117647058824)*x512))+(((-29.4117647058824)*x514))+(((-1.0)*x512*x518))+(((-1.0)*x512*x516))+x511);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
pz=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
pp=((px*px)+(py*py));
j1eval[0]=((-1.0)+(((29.4117647058824)*cj0*px))+(((29.4117647058824)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
pz=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
pp=((px*px)+(py*py));
IkReal x526=cj0*cj0;
IkReal x527=py*py;
IkReal x528=(cj0*px);
IkReal x529=(py*sj0);
IkReal x530=((865.051903114187)*x527);
j1eval[0]=((-1.0)+(((29.4117647058824)*x528))+(((29.4117647058824)*x529)));
j1eval[1]=((1.0)+(((-58.8235294117647)*x529))+(((-58.8235294117647)*x528))+(((-1.0)*x526*x530))+x530+(((865.051903114187)*x526*(px*px)))+(((1730.10380622837)*x528*x529)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x531=((29.4117647058824)*px);
IkReal x532=((29.4117647058824)*py);
IkReal x533=((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px))));
IkReal x540 = x533;
if(IKabs(x540)==0){
continue;
}
IkReal x534=pow(x540,-0.5);
if((x533) < -0.00001)
continue;
IkReal x535=IKabs(IKsqrt(x533));
CheckValue<IkReal> x541=IKPowWithIntegerCheck(x535,-1);
if(!x541.valid){
continue;
}
IkReal x536=x541.value;
if((((1.0)+(((-1.0)*(x536*x536))))) < -0.00001)
continue;
IkReal x537=IKsqrt(((1.0)+(((-1.0)*(x536*x536)))));
IkReal x538=(x534*x536);
IkReal x539=(x534*x537);
if( (x536) < -1-IKFAST_SINCOS_THRESH || (x536) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(x531),IkReal(x532),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
IkReal gconst0=((IKasin(x536))+(((-1.0)*(x542.value))));
IkReal gconst1=((((-1.0)*x531*x539))+((x532*x538)));
IkReal gconst2=(((x531*x538))+((x532*x539)));
CheckValue<IkReal> x543 = IKatan2WithCheck(IkReal(((29.4117647058824)*px)),IkReal(((29.4117647058824)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x543.valid){
continue;
}
if((((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(IKabs(IKsqrt(((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px)))))),-1);
if(!x544.valid){
continue;
}
if( (x544.value) < -1-IKFAST_SINCOS_THRESH || (x544.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x543.value)+(((-1.0)*(IKasin(x544.value))))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x545=px*px;
IkReal x546=py*py;
IkReal x547=gconst2*gconst2;
IkReal x548=(gconst1*py);
IkReal x549=(gconst2*px);
CheckValue<IkReal> x550=IKPowWithIntegerCheck(((-0.02958)+(((0.87)*x548))+(((0.87)*x549))),-1);
if(!x550.valid){
continue;
}
if( IKabs(((0.293103448275862)+(((-8.62068965517241)*x549))+(((-8.62068965517241)*x548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x550.value)*(((-1.17641599923266)+(((-7.249999981875e-8)*x546*x547))+(((-4.964)*x549))+(((-4.964)*x548))+(((29.0)*x546))+(((88.000000145)*x548*x549))+(((44.0)*x546*(gconst1*gconst1)))+(((28.9999999275)*x545))+(((44.0000000725)*x545*x547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.293103448275862)+(((-8.62068965517241)*x549))+(((-8.62068965517241)*x548))))+IKsqr(((x550.value)*(((-1.17641599923266)+(((-7.249999981875e-8)*x546*x547))+(((-4.964)*x549))+(((-4.964)*x548))+(((29.0)*x546))+(((88.000000145)*x548*x549))+(((44.0)*x546*(gconst1*gconst1)))+(((28.9999999275)*x545))+(((44.0000000725)*x545*x547))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.293103448275862)+(((-8.62068965517241)*x549))+(((-8.62068965517241)*x548))), ((x550.value)*(((-1.17641599923266)+(((-7.249999981875e-8)*x546*x547))+(((-4.964)*x549))+(((-4.964)*x548))+(((29.0)*x546))+(((88.000000145)*x548*x549))+(((44.0)*x546*(gconst1*gconst1)))+(((28.9999999275)*x545))+(((44.0000000725)*x545*x547))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x551=IKsin(j1);
IkReal x552=IKcos(j1);
IkReal x553=py*py;
IkReal x554=gconst2*gconst2;
IkReal x555=px*px;
IkReal x556=(gconst2*px);
IkReal x557=(gconst1*py);
IkReal x558=((1.0)*x552);
IkReal x559=((0.176)*x551);
IkReal x560=((2.49999999375e-9)*x554);
IkReal x561=((0.03)*x552);
evalcond[0]=((0.116)*x552);
evalcond[1]=((0.034)+(((-1.0)*x556))+(((-1.0)*x557))+(((-0.116)*x551)));
evalcond[2]=((0.116)+((x551*x557))+((x551*x556))+(((-0.034)*x551)));
evalcond[3]=((((-1.0)*x556*x558))+(((0.034)*x552))+(((-1.0)*x557*x558)));
evalcond[4]=((0.04231999997354)+(((-1.0)*x553))+((x556*x561))+((x557*x559))+(((-1.0)*x555*x560))+(((-0.9999999975)*x555))+((x553*x560))+(((-0.00102)*x552))+(((0.068)*x556))+(((0.068)*x557))+(((-4.9999999875e-9)*x556*x557))+((x556*x559))+((x557*x561))+(((-0.005984)*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x562=((29.4117647058824)*px);
IkReal x563=((29.4117647058824)*py);
IkReal x564=((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px))));
IkReal x571 = x564;
if(IKabs(x571)==0){
continue;
}
IkReal x565=pow(x571,-0.5);
if((x564) < -0.00001)
continue;
IkReal x566=IKabs(IKsqrt(x564));
CheckValue<IkReal> x572=IKPowWithIntegerCheck(x566,-1);
if(!x572.valid){
continue;
}
IkReal x567=x572.value;
if((((1.0)+(((-1.0)*(x567*x567))))) < -0.00001)
continue;
IkReal x568=IKsqrt(((1.0)+(((-1.0)*(x567*x567)))));
IkReal x569=(x565*x567);
IkReal x570=(x565*x568);
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal(x562),IkReal(x563),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
if( (x567) < -1-IKFAST_SINCOS_THRESH || (x567) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x573.value)))+(((-1.0)*(IKasin(x567)))));
IkReal gconst4=(((x563*x569))+((x562*x570)));
IkReal gconst5=(((x562*x569))+(((-1.0)*x563*x570)));
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((29.4117647058824)*px)),IkReal(((29.4117647058824)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
if((((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKabs(IKsqrt(((((865.051903114187)*(py*py)))+(((865.051903114187)*(px*px)))))),-1);
if(!x575.valid){
continue;
}
if( (x575.value) < -1-IKFAST_SINCOS_THRESH || (x575.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x574.value)+(IKasin(x575.value))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x576=px*px;
IkReal x577=py*py;
IkReal x578=gconst5*gconst5;
IkReal x579=(gconst5*px);
IkReal x580=(gconst4*py);
CheckValue<IkReal> x581=IKPowWithIntegerCheck(((-0.02958)+(((0.87)*x580))+(((0.87)*x579))),-1);
if(!x581.valid){
continue;
}
if( IKabs(((0.293103448275862)+(((-8.62068965517241)*x580))+(((-8.62068965517241)*x579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x581.value)*(((-1.17641599923266)+(((44.0)*x577*(gconst4*gconst4)))+(((88.000000145)*x579*x580))+(((-4.964)*x579))+(((-7.249999981875e-8)*x577*x578))+(((44.0000000725)*x576*x578))+(((-4.964)*x580))+(((28.9999999275)*x576))+(((29.0)*x577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.293103448275862)+(((-8.62068965517241)*x580))+(((-8.62068965517241)*x579))))+IKsqr(((x581.value)*(((-1.17641599923266)+(((44.0)*x577*(gconst4*gconst4)))+(((88.000000145)*x579*x580))+(((-4.964)*x579))+(((-7.249999981875e-8)*x577*x578))+(((44.0000000725)*x576*x578))+(((-4.964)*x580))+(((28.9999999275)*x576))+(((29.0)*x577))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.293103448275862)+(((-8.62068965517241)*x580))+(((-8.62068965517241)*x579))), ((x581.value)*(((-1.17641599923266)+(((44.0)*x577*(gconst4*gconst4)))+(((88.000000145)*x579*x580))+(((-4.964)*x579))+(((-7.249999981875e-8)*x577*x578))+(((44.0000000725)*x576*x578))+(((-4.964)*x580))+(((28.9999999275)*x576))+(((29.0)*x577))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x582=IKsin(j1);
IkReal x583=IKcos(j1);
IkReal x584=gconst5*gconst5;
IkReal x585=px*px;
IkReal x586=py*py;
IkReal x587=(gconst4*py);
IkReal x588=(gconst5*px);
IkReal x589=((1.0)*x583);
IkReal x590=((0.176)*x582);
IkReal x591=((0.03)*x583);
IkReal x592=((2.49999999375e-9)*x584);
evalcond[0]=((0.116)*x583);
evalcond[1]=((0.034)+(((-1.0)*x587))+(((-1.0)*x588))+(((-0.116)*x582)));
evalcond[2]=((0.116)+((x582*x587))+((x582*x588))+(((-0.034)*x582)));
evalcond[3]=((((-1.0)*x588*x589))+(((-1.0)*x587*x589))+(((0.034)*x583)));
evalcond[4]=((0.04231999997354)+(((-0.00102)*x583))+(((-1.0)*x586))+(((0.068)*x588))+(((0.068)*x587))+(((-0.005984)*x582))+(((-1.0)*x585*x592))+(((-0.9999999975)*x585))+(((-4.9999999875e-9)*x587*x588))+((x588*x591))+((x588*x590))+((x586*x592))+((x587*x590))+((x587*x591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x593=py*py;
IkReal x594=px*px*px;
IkReal x595=cj0*cj0;
IkReal x596=px*px;
IkReal x597=cj0*cj0*cj0;
IkReal x598=py*py*py;
IkReal x599=(py*sj0);
IkReal x600=(cj0*px);
IkReal x601=((7.5)*x593);
IkReal x602=(sj0*x598);
IkReal x603=(x595*x596);
CheckValue<IkReal> x604=IKPowWithIntegerCheck(((-8.5)+(((250.0)*x599))+(((250.0)*x600))),-1);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605=IKPowWithIntegerCheck(((0.00867)+(((-0.51)*x599))+(((7.5)*x603))+(((-0.51)*x600))+x601+(((15.0)*x599*x600))+(((-1.0)*x595*x601))),-1);
if(!x605.valid){
continue;
}
if( IKabs(((-29.0)*(x604.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x605.value)*(((0.18618399977509)+(((249.999999375)*x596*x599))+(((17.00000002125)*x593*x595))+(((-17.00000002125)*x603))+(((249.999999375)*cj0*x594))+(((-8.49999997875)*x596))+(((-4.897999993385)*x600))+(((-25.5)*x593))+(((-6.249999984375e-7)*x595*x602))+(((1.8749999953125e-6)*x599*x603))+(((-1.8749999953125e-6)*px*x593*x597))+(((6.249999984375e-7)*x594*x597))+(((250.00000125)*x593*x600))+(((250.0)*x602))+(((-4.897999993385)*x599))+(((-34.0000000425)*x599*x600)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-29.0)*(x604.value)))+IKsqr(((x605.value)*(((0.18618399977509)+(((249.999999375)*x596*x599))+(((17.00000002125)*x593*x595))+(((-17.00000002125)*x603))+(((249.999999375)*cj0*x594))+(((-8.49999997875)*x596))+(((-4.897999993385)*x600))+(((-25.5)*x593))+(((-6.249999984375e-7)*x595*x602))+(((1.8749999953125e-6)*x599*x603))+(((-1.8749999953125e-6)*px*x593*x597))+(((6.249999984375e-7)*x594*x597))+(((250.00000125)*x593*x600))+(((250.0)*x602))+(((-4.897999993385)*x599))+(((-34.0000000425)*x599*x600))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-29.0)*(x604.value)), ((x605.value)*(((0.18618399977509)+(((249.999999375)*x596*x599))+(((17.00000002125)*x593*x595))+(((-17.00000002125)*x603))+(((249.999999375)*cj0*x594))+(((-8.49999997875)*x596))+(((-4.897999993385)*x600))+(((-25.5)*x593))+(((-6.249999984375e-7)*x595*x602))+(((1.8749999953125e-6)*x599*x603))+(((-1.8749999953125e-6)*px*x593*x597))+(((6.249999984375e-7)*x594*x597))+(((250.00000125)*x593*x600))+(((250.0)*x602))+(((-4.897999993385)*x599))+(((-34.0000000425)*x599*x600))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x606=IKsin(j1);
IkReal x607=IKcos(j1);
IkReal x608=cj0*cj0;
IkReal x609=px*px;
IkReal x610=py*py;
IkReal x611=(cj0*px);
IkReal x612=(py*sj0);
IkReal x613=((1.0)*x607);
IkReal x614=((2.49999999375e-9)*x608);
IkReal x615=((0.03)*x607);
IkReal x616=(x606*x612);
evalcond[0]=((0.116)*x607);
evalcond[1]=((0.034)+(((-0.116)*x606))+(((-1.0)*x611))+(((-1.0)*x612)));
evalcond[2]=((0.116)+(((-0.034)*x606))+((x606*x611))+x616);
evalcond[3]=((((-1.0)*x612*x613))+(((-1.0)*x611*x613))+(((0.034)*x607)));
evalcond[4]=((0.04231999997354)+(((-0.00102)*x607))+(((-1.0)*x609*x614))+((x611*x615))+(((0.068)*x612))+(((0.068)*x611))+((x612*x615))+(((-0.005984)*x606))+(((-1.0)*x610))+(((-4.9999999875e-9)*x611*x612))+(((0.176)*x606*x611))+(((0.176)*x616))+((x610*x614))+(((-0.9999999975)*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x617=px*px;
IkReal x618=cj0*cj0;
IkReal x619=py*py;
IkReal x620=(cj0*px);
IkReal x621=(py*sj0);
IkReal x622=((44.0000000725)*x618);
CheckValue<IkReal> x623=IKPowWithIntegerCheck(((-0.02958)+(((0.87)*x621))+(((0.87)*x620))),-1);
if(!x623.valid){
continue;
}
if( IKabs(((0.293103448275862)+(((-8.62068965517241)*x620))+(((-8.62068965517241)*x621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x623.value)*(((-1.17641599923266)+((x617*x622))+(((-4.964)*x620))+(((-4.964)*x621))+(((-1.0)*x619*x622))+(((88.000000145)*x620*x621))+(((73.0)*x619))+(((28.9999999275)*x617)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.293103448275862)+(((-8.62068965517241)*x620))+(((-8.62068965517241)*x621))))+IKsqr(((x623.value)*(((-1.17641599923266)+((x617*x622))+(((-4.964)*x620))+(((-4.964)*x621))+(((-1.0)*x619*x622))+(((88.000000145)*x620*x621))+(((73.0)*x619))+(((28.9999999275)*x617))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.293103448275862)+(((-8.62068965517241)*x620))+(((-8.62068965517241)*x621))), ((x623.value)*(((-1.17641599923266)+((x617*x622))+(((-4.964)*x620))+(((-4.964)*x621))+(((-1.0)*x619*x622))+(((88.000000145)*x620*x621))+(((73.0)*x619))+(((28.9999999275)*x617))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x624=IKsin(j1);
IkReal x625=IKcos(j1);
IkReal x626=cj0*cj0;
IkReal x627=px*px;
IkReal x628=py*py;
IkReal x629=(cj0*px);
IkReal x630=(py*sj0);
IkReal x631=((1.0)*x625);
IkReal x632=((2.49999999375e-9)*x626);
IkReal x633=((0.03)*x625);
IkReal x634=(x624*x630);
evalcond[0]=((0.116)*x625);
evalcond[1]=((0.034)+(((-0.116)*x624))+(((-1.0)*x629))+(((-1.0)*x630)));
evalcond[2]=((0.116)+x634+((x624*x629))+(((-0.034)*x624)));
evalcond[3]=((((-1.0)*x629*x631))+(((-1.0)*x630*x631))+(((0.034)*x625)));
evalcond[4]=((0.04231999997354)+(((0.068)*x629))+(((0.068)*x630))+(((-0.005984)*x624))+(((-4.9999999875e-9)*x629*x630))+((x628*x632))+((x629*x633))+(((-0.9999999975)*x627))+(((0.176)*x624*x629))+(((-0.00102)*x625))+(((-1.0)*x627*x632))+(((0.176)*x634))+(((-1.0)*x628))+((x630*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((-19347.2784483682)+(((-16736400.041841)*(py*py)))+(((16556400.0)*(cj2*cj2)*(pz*pz)))+(((-1125835.20281459)*py*sj0*(cj2*cj2)))+(((16556400.041391)*(cj0*cj0)*(cj2*cj2)*(px*px)))+(((16556400.041391)*(cj2*cj2)*(py*py)))+(((-2829.88800707472)*cj2*sj2))+(((2448000.00612)*sj2*(cj0*cj0)*(py*py)))+(((2448000.00612)*cj2*sj2*(cj0*cj0)*(py*py)))+(((166464.00041616)*py*sj0*sj2))+(((-180000.00045)*cj2*(cj0*cj0)*(px*px)))+(((16736400.041841)*(cj0*cj0)*(py*py)))+(((-1125835.20281459)*cj0*px*(cj2*cj2)))+(((166464.00041616)*cj0*cj2*px*sj2))+(((-360000.0009)*cj0*cj2*px*py*sj0))+(((-2448000.0)*cj2*sj2*(pz*pz)))+(((1138075.20284519)*cj0*px))+(((-2448000.00612)*sj2*(py*py)))+(((166464.00041616)*cj0*px*sj2))+(((14361600.0)*cj2*(pz*pz)))+(((-208.0800005202)*cj2))+(((-2448000.00612)*sj2*(cj0*cj0)*(px*px)))+(((-2448000.00612)*cj2*sj2*(cj0*cj0)*(px*px)))+(((12240.0000306)*cj2*py*sj0))+(((-33472800.083682)*cj0*px*py*sj0))+(((3187600.0)*(pz*pz)))+(((33112800.082782)*cj0*px*py*sj0*(cj2*cj2)))+(((-1056000.0)*sj2*(pz*pz)))+(((180000.00045)*cj2*(cj0*cj0)*(py*py)))+(((1138075.20284519)*py*sj0))+(((-4896000.01224)*cj0*px*py*sj0*sj2))+(((19139.198447848)*(cj2*cj2)))+(((-2829.88800707472)*sj2))+(((-2448000.00612)*cj2*sj2*(py*py)))+(((166464.00041616)*cj2*py*sj0*sj2))+(((12240.0000306)*cj0*cj2*px))+(((-16556400.041391)*(cj0*cj0)*(cj2*cj2)*(py*py)))+(((-4896000.01224)*cj0*cj2*px*py*sj0*sj2))+(((-180000.00045)*cj2*(py*py)))+(((-16736400.041841)*(cj0*cj0)*(px*px)))),-1);
if(!x635.valid){
continue;
}
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((4080000015.3)+(((55488000208.08)*sj2))+(((-120000000450.0)*cj0*cj2*px))+(((-1632000006120.0)*py*sj0*sj2))+(((-120000000450.0)*py*sj0))+(((-120000000450.0)*cj0*px))+(((-1632000006120.0)*cj0*px*sj2))+(((-704000001760.0)*pz))+(((4080000015.3)*cj2))+(((120000000300.0)*pz*sj2))+(((-1632000004080.0)*cj2*pz))+(((-120000000450.0)*cj2*py*sj0))),-1);
if(!x636.valid){
continue;
}
if( IKabs(((x635.value)*(((48826.8289220671)+(((35200000.0)*py*sj0*(pz*pz)))+(((1383523.20345881)*py*sj0*(cj2*cj2)))+(((-2774400.0)*cj2*(pz*pz)))+(((408000.00051)*cj0*px*pz))+(((-163200000.204)*cj0*px*py*pz*sj0*sj2))+(((-214074.000535185)*cj0*px*sj2))+(((-8489.66402122416)*(sj2*sj2*sj2)))+(((-12000000.015)*cj0*px*py*pz*sj0))+(((-6000000.0)*py*sj0*sj2*(pz*pz)))+(((6000000.0075)*cj2*pz*(cj0*cj0)*(py*py)))+(((6000000.0075)*pz*(cj0*cj0)*(py*py)))+(((-12000000.015)*cj0*cj2*px*py*pz*sj0))+(((35200000.0)*cj0*px*(pz*pz)))+(((-174546.000218183)*pz))+(((249696.00062424)*py*sj0*(sj2*sj2*sj2)))+(((16933.4280423336)*sj2*(cj2*cj2)))+(((-6000000.0075)*cj2*pz*(cj0*cj0)*(px*px)))+(((204000.0)*sj2*(pz*pz)))+(((-1436083.20359021)*cj0*px))+(((5548800.006936)*cj0*px*pz*sj2))+(((-214074.000535185)*py*sj0*sj2))+(((-3393345.60848336)*cj0*cj2*px))+(((521740.800652176)*pz*sj2))+(((-3393345.60848336)*cj2*py*sj0))+(((1383523.20345881)*cj0*px*(cj2*cj2)))+(((7278.51601819629)*sj2))+(((81600000.0)*cj0*cj2*px*(pz*pz)))+(((-6000000.0)*cj0*px*sj2*(pz*pz)))+(((747738.000934673)*pz*(cj2*cj2*cj2)))+(((-1196800.0)*(pz*pz)))+(((3340785.60835196)*py*sj0*(cj2*cj2*cj2)))+(((-712116.00178029)*cj0*cj2*px*sj2))+(((2877206.40359651)*cj2*pz*sj2))+(((679194.000848992)*pz*(cj2*cj2)))+(((-498042.001245105)*py*sj0*sj2*(cj2*cj2)))+(((-243090.000303863)*cj2*pz))+(((-6000000.0075)*cj2*pz*(py*py)))+(((408000.00051)*py*pz*sj0))+(((-498042.001245105)*cj0*px*sj2*(cj2*cj2)))+(((81600000.0)*cj2*py*sj0*(pz*pz)))+(((81600000.102)*pz*sj2*(cj0*cj0)*(py*py)))+(((24211.9440605299)*cj2*sj2))+(((-712116.00178029)*cj2*py*sj0*sj2))+(((115373.750688434)*cj2))+(((408000.00051)*cj0*cj2*px*pz))+(((408000.00051)*cj2*py*pz*sj0))+(((3359145.60419893)*pz*sj2*(cj2*cj2)))+(((-6000000.0075)*pz*(py*py)))+(((-113586.710683967)*(cj2*cj2*cj2)))+(((-47039.7889175995)*(cj2*cj2)))+(((-81600000.102)*pz*sj2*(cj0*cj0)*(px*px)))+(((18360.00002295)*pz*(sj2*sj2*sj2)))+(((5548800.006936)*py*pz*sj0*sj2))+(((-1436083.20359021)*py*sj0))+(((3340785.60835196)*cj0*px*(cj2*cj2*cj2)))+(((249696.00062424)*cj0*px*(sj2*sj2*sj2)))+(((-6000000.0075)*pz*(cj0*cj0)*(px*px)))+(((-81600000.102)*pz*sj2*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x636.value)*(((-334728001255.23)+(((-3600000013.5)*cj2))+(((331128001241.73)*(cj2*cj2)))+(((-48960000183.6)*cj2*sj2))+(((8000000010000.0)*(pz*pz)))+(((-48960000183.6)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x635.value)*(((48826.8289220671)+(((35200000.0)*py*sj0*(pz*pz)))+(((1383523.20345881)*py*sj0*(cj2*cj2)))+(((-2774400.0)*cj2*(pz*pz)))+(((408000.00051)*cj0*px*pz))+(((-163200000.204)*cj0*px*py*pz*sj0*sj2))+(((-214074.000535185)*cj0*px*sj2))+(((-8489.66402122416)*(sj2*sj2*sj2)))+(((-12000000.015)*cj0*px*py*pz*sj0))+(((-6000000.0)*py*sj0*sj2*(pz*pz)))+(((6000000.0075)*cj2*pz*(cj0*cj0)*(py*py)))+(((6000000.0075)*pz*(cj0*cj0)*(py*py)))+(((-12000000.015)*cj0*cj2*px*py*pz*sj0))+(((35200000.0)*cj0*px*(pz*pz)))+(((-174546.000218183)*pz))+(((249696.00062424)*py*sj0*(sj2*sj2*sj2)))+(((16933.4280423336)*sj2*(cj2*cj2)))+(((-6000000.0075)*cj2*pz*(cj0*cj0)*(px*px)))+(((204000.0)*sj2*(pz*pz)))+(((-1436083.20359021)*cj0*px))+(((5548800.006936)*cj0*px*pz*sj2))+(((-214074.000535185)*py*sj0*sj2))+(((-3393345.60848336)*cj0*cj2*px))+(((521740.800652176)*pz*sj2))+(((-3393345.60848336)*cj2*py*sj0))+(((1383523.20345881)*cj0*px*(cj2*cj2)))+(((7278.51601819629)*sj2))+(((81600000.0)*cj0*cj2*px*(pz*pz)))+(((-6000000.0)*cj0*px*sj2*(pz*pz)))+(((747738.000934673)*pz*(cj2*cj2*cj2)))+(((-1196800.0)*(pz*pz)))+(((3340785.60835196)*py*sj0*(cj2*cj2*cj2)))+(((-712116.00178029)*cj0*cj2*px*sj2))+(((2877206.40359651)*cj2*pz*sj2))+(((679194.000848992)*pz*(cj2*cj2)))+(((-498042.001245105)*py*sj0*sj2*(cj2*cj2)))+(((-243090.000303863)*cj2*pz))+(((-6000000.0075)*cj2*pz*(py*py)))+(((408000.00051)*py*pz*sj0))+(((-498042.001245105)*cj0*px*sj2*(cj2*cj2)))+(((81600000.0)*cj2*py*sj0*(pz*pz)))+(((81600000.102)*pz*sj2*(cj0*cj0)*(py*py)))+(((24211.9440605299)*cj2*sj2))+(((-712116.00178029)*cj2*py*sj0*sj2))+(((115373.750688434)*cj2))+(((408000.00051)*cj0*cj2*px*pz))+(((408000.00051)*cj2*py*pz*sj0))+(((3359145.60419893)*pz*sj2*(cj2*cj2)))+(((-6000000.0075)*pz*(py*py)))+(((-113586.710683967)*(cj2*cj2*cj2)))+(((-47039.7889175995)*(cj2*cj2)))+(((-81600000.102)*pz*sj2*(cj0*cj0)*(px*px)))+(((18360.00002295)*pz*(sj2*sj2*sj2)))+(((5548800.006936)*py*pz*sj0*sj2))+(((-1436083.20359021)*py*sj0))+(((3340785.60835196)*cj0*px*(cj2*cj2*cj2)))+(((249696.00062424)*cj0*px*(sj2*sj2*sj2)))+(((-6000000.0075)*pz*(cj0*cj0)*(px*px)))+(((-81600000.102)*pz*sj2*(py*py)))))))+IKsqr(((x636.value)*(((-334728001255.23)+(((-3600000013.5)*cj2))+(((331128001241.73)*(cj2*cj2)))+(((-48960000183.6)*cj2*sj2))+(((8000000010000.0)*(pz*pz)))+(((-48960000183.6)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x635.value)*(((48826.8289220671)+(((35200000.0)*py*sj0*(pz*pz)))+(((1383523.20345881)*py*sj0*(cj2*cj2)))+(((-2774400.0)*cj2*(pz*pz)))+(((408000.00051)*cj0*px*pz))+(((-163200000.204)*cj0*px*py*pz*sj0*sj2))+(((-214074.000535185)*cj0*px*sj2))+(((-8489.66402122416)*(sj2*sj2*sj2)))+(((-12000000.015)*cj0*px*py*pz*sj0))+(((-6000000.0)*py*sj0*sj2*(pz*pz)))+(((6000000.0075)*cj2*pz*(cj0*cj0)*(py*py)))+(((6000000.0075)*pz*(cj0*cj0)*(py*py)))+(((-12000000.015)*cj0*cj2*px*py*pz*sj0))+(((35200000.0)*cj0*px*(pz*pz)))+(((-174546.000218183)*pz))+(((249696.00062424)*py*sj0*(sj2*sj2*sj2)))+(((16933.4280423336)*sj2*(cj2*cj2)))+(((-6000000.0075)*cj2*pz*(cj0*cj0)*(px*px)))+(((204000.0)*sj2*(pz*pz)))+(((-1436083.20359021)*cj0*px))+(((5548800.006936)*cj0*px*pz*sj2))+(((-214074.000535185)*py*sj0*sj2))+(((-3393345.60848336)*cj0*cj2*px))+(((521740.800652176)*pz*sj2))+(((-3393345.60848336)*cj2*py*sj0))+(((1383523.20345881)*cj0*px*(cj2*cj2)))+(((7278.51601819629)*sj2))+(((81600000.0)*cj0*cj2*px*(pz*pz)))+(((-6000000.0)*cj0*px*sj2*(pz*pz)))+(((747738.000934673)*pz*(cj2*cj2*cj2)))+(((-1196800.0)*(pz*pz)))+(((3340785.60835196)*py*sj0*(cj2*cj2*cj2)))+(((-712116.00178029)*cj0*cj2*px*sj2))+(((2877206.40359651)*cj2*pz*sj2))+(((679194.000848992)*pz*(cj2*cj2)))+(((-498042.001245105)*py*sj0*sj2*(cj2*cj2)))+(((-243090.000303863)*cj2*pz))+(((-6000000.0075)*cj2*pz*(py*py)))+(((408000.00051)*py*pz*sj0))+(((-498042.001245105)*cj0*px*sj2*(cj2*cj2)))+(((81600000.0)*cj2*py*sj0*(pz*pz)))+(((81600000.102)*pz*sj2*(cj0*cj0)*(py*py)))+(((24211.9440605299)*cj2*sj2))+(((-712116.00178029)*cj2*py*sj0*sj2))+(((115373.750688434)*cj2))+(((408000.00051)*cj0*cj2*px*pz))+(((408000.00051)*cj2*py*pz*sj0))+(((3359145.60419893)*pz*sj2*(cj2*cj2)))+(((-6000000.0075)*pz*(py*py)))+(((-113586.710683967)*(cj2*cj2*cj2)))+(((-47039.7889175995)*(cj2*cj2)))+(((-81600000.102)*pz*sj2*(cj0*cj0)*(px*px)))+(((18360.00002295)*pz*(sj2*sj2*sj2)))+(((5548800.006936)*py*pz*sj0*sj2))+(((-1436083.20359021)*py*sj0))+(((3340785.60835196)*cj0*px*(cj2*cj2*cj2)))+(((249696.00062424)*cj0*px*(sj2*sj2*sj2)))+(((-6000000.0075)*pz*(cj0*cj0)*(px*px)))+(((-81600000.102)*pz*sj2*(py*py)))))), ((x636.value)*(((-334728001255.23)+(((-3600000013.5)*cj2))+(((331128001241.73)*(cj2*cj2)))+(((-48960000183.6)*cj2*sj2))+(((8000000010000.0)*(pz*pz)))+(((-48960000183.6)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x637=IKsin(j1);
IkReal x638=IKcos(j1);
IkReal x639=cj0*cj0;
IkReal x640=px*px;
IkReal x641=py*py;
IkReal x642=((0.99999999875)*pz);
IkReal x643=((0.204)*sj2);
IkReal x644=(cj0*px);
IkReal x645=(py*sj0);
IkReal x646=((0.204)*cj2);
IkReal x647=((0.015)*cj2);
IkReal x648=((0.015)*sj2);
IkReal x649=((1.0)*x638);
IkReal x650=((0.015)*x637);
IkReal x651=((2.49999999375e-9)*x639);
IkReal x652=((0.03)*x638);
IkReal x653=(x637*x645);
evalcond[0]=((-0.088)+((x637*x644))+(((-1.0)*x646))+x648+x653+(((-0.034)*x637))+(((-1.0)*x638*x642)));
evalcond[1]=((0.015)+(((0.034)*x638))+(((-1.0)*x644*x649))+x647+x643+(((-1.0)*x637*x642))+(((-1.0)*x645*x649)));
evalcond[2]=(((x638*x648))+((x637*x643))+((x637*x647))+(((-1.0)*x642))+x650+(((-0.088)*x638))+(((-1.0)*x638*x646)));
evalcond[3]=((0.034)+((x638*x643))+((x638*x647))+(((0.088)*x637))+(((-1.0)*x645))+(((-1.0)*x644))+((x637*x646))+(((0.015)*x638))+(((-1.0)*x637*x648)));
evalcond[4]=((0.04231999997354)+(((-0.005984)*x637))+(((-1.0)*x640*x651))+(((-1.0)*x641))+(((0.0299999999625)*pz*x637))+(((0.068)*x644))+(((0.068)*x645))+((x644*x652))+((x645*x652))+(((-0.9999999975)*(pz*pz)))+(((-0.00102)*x638))+(((-0.9999999975)*x640))+(((-4.9999999875e-9)*x644*x645))+((x641*x651))+(((-0.17599999978)*pz*x638))+(((0.176)*x653))+(((0.176)*x637*x644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((1473946247369.73)+(((28723200143616.0)*py*sj0*sj2))+(((-488294402441.472)*sj2))+(((1.2750400063752e+15)*(py*py)))+(((28723200143616.0)*cj0*px*sj2))+(((979200004896000.0)*cj2*sj2*(cj0*cj0)*(py*py)))+(((6.6225600331128e+15)*(cj2*cj2)*(py*py)))+(((1.2750400063752e+15)*(cj0*cj0)*(px*px)))+(((-1131955205659.78)*cj2*sj2))+(((-6.6945600167364e+15)*(pz*pz)))+(((-422400002112000.0)*sj2*(cj0*cj0)*(px*px)))+(((66585600332928.0)*cj2*py*sj0*sj2))+(((-86702720433513.6)*py*sj0))+(((-450334082251670.0)*py*sj0*(cj2*cj2)))+(((-1.958400009792e+15)*cj0*cj2*px*py*sj0*sj2))+(((2.5500800127504e+15)*cj0*px*py*sj0))+(((-979200002448000.0)*cj2*sj2*(pz*pz)))+(((6.6225600331128e+15)*(cj0*cj0)*(cj2*cj2)*(px*px)))+(((5.7446400287232e+15)*cj2*(cj0*cj0)*(px*px)))+(((422400002112000.0)*sj2*(cj0*cj0)*(py*py)))+(((-979200002448000.0)*sj2*(pz*pz)))+(((7655679398278.4)*(cj2*cj2)))+(((6640803873204.02)*cj2))+(((-450334082251670.0)*cj0*px*(cj2*cj2)))+(((-72000000180000.0)*cj2*(pz*pz)))+(((66585600332928.0)*cj0*cj2*px*sj2))+(((-5.7446400287232e+15)*cj2*(cj0*cj0)*(py*py)))+(((-390635521953178.0)*cj2*py*sj0))+(((-844800004224000.0)*cj0*px*py*sj0*sj2))+(((-979200004896000.0)*cj2*sj2*(cj0*cj0)*(px*px)))+(((-390635521953178.0)*cj0*cj2*px))+(((1.32451200662256e+16)*cj0*px*py*sj0*(cj2*cj2)))+(((-422400002112000.0)*sj2*(py*py)))+(((-6.6225600331128e+15)*(cj0*cj0)*(cj2*cj2)*(py*py)))+(((6.6225600165564e+15)*(cj2*cj2)*(pz*pz)))+(((-979200004896000.0)*cj2*sj2*(py*py)))+(((1.14892800574464e+16)*cj0*cj2*px*py*sj0))+(((-1.2750400063752e+15)*(cj0*cj0)*(py*py)))+(((5.7446400287232e+15)*cj2*(py*py)))+(((-86702720433513.6)*cj0*px))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1196800.002992)+(((2774400.006936)*cj2))+(((6000000.0075)*pz))+(((-204000.00051)*sj2))+(((6000000.015)*py*sj0*sj2))+(((-81600000.204)*cj2*py*sj0))+(((6000000.0075)*cj2*pz))+(((-35200000.088)*py*sj0))+(((6000000.015)*cj0*px*sj2))+(((-35200000.088)*cj0*px))+(((-81600000.204)*cj0*cj2*px))+(((81600000.102)*pz*sj2))),-1);
if(!x655.valid){
continue;
}
if( IKabs(((x654.value)*(((-4030343700151.72)+(((-3.26400000816e+16)*cj2*py*sj0*(pz*pz)))+(((-3.26400000408e+16)*sj2*(pz*pz*pz)))+(((1.74835584874178e+15)*py*sj0*(cj2*cj2)))+(((-299635201498176.0)*cj0*px*sj2*(cj2*cj2)))+(((246428160924106.0)*pz*sj2))+(((-1.40800000352e+16)*py*sj0*(pz*pz)))+(((1895731209478.66)*sj2))+(((-2.400000003e+15)*cj2*(pz*pz*pz)))+(((299095201121607.0)*pz*(cj2*cj2*cj2)))+(((-55756800278784.0)*py*sj0*sj2))+(((118539520592698.0)*py*sj0))+(((-81600000204000.0)*sj2*(pz*pz)))+(((780324483901622.0)*cj2*py*sj0))+(((118539520592698.0)*cj0*px))+(((2.400000006e+15)*py*sj0*sj2*(pz*pz)))+(((1.15088256431581e+15)*cj2*pz*sj2))+(((271677601018791.0)*pz*(cj2*cj2)))+(((-299635201498176.0)*py*sj0*sj2*(cj2*cj2)))+(((-540000002700.0)*cj0*px*(sj2*sj2*sj2)))+(((-59444098857220.5)*(cj2*cj2)))+(((-26531032452655.2)*cj2))+(((-258508801292544.0)*cj2*py*sj0*sj2))+(((18360000091.8)*(sj2*sj2*sj2)))+(((-3.26400000816e+16)*cj0*cj2*px*(pz*pz)))+(((1.74835584874178e+15)*cj0*px*(cj2*cj2)))+(((1.33631424668157e+15)*cj0*px*(cj2*cj2*cj2)))+(((-45434684387173.4)*(cj2*cj2*cj2)))+(((-258508801292544.0)*cj0*cj2*px*sj2))+(((1.34365824503872e+15)*pz*sj2*(cj2*cj2)))+(((-67044000251415.0)*pz))+(((8789299243946.5)*cj2*sj2))+(((7344000027540.0)*pz*(sj2*sj2*sj2)))+(((-55756800278784.0)*cj0*px*sj2))+(((-1.40800000352e+16)*cj0*px*(pz*pz)))+(((478720001196800.0)*(pz*pz)))+(((-94461600354231.0)*cj2*pz))+(((1.1097600027744e+15)*cj2*(pz*pz)))+(((780324483901622.0)*cj0*cj2*px))+(((-2.400000003e+15)*(pz*pz*pz)))+(((-540000002700.0)*py*sj0*(sj2*sj2*sj2)))+(((2.400000006e+15)*cj0*px*sj2*(pz*pz)))+(((1.33631424668157e+15)*py*sj0*(cj2*cj2*cj2)))+(((10187596850938.0)*sj2*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x655.value)*(((696000.00174)+(((-2448000.00612)*(cj2*cj2)))+(((400000000.5)*cj0*px*pz))+(((-1752000.00438)*cj2))+(((400000000.5)*py*pz*sj0))+(((-16556400.041391)*cj2*sj2))+(((-7090800.017727)*sj2))+(((-13600000.017)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x654.value)*(((-4030343700151.72)+(((-3.26400000816e+16)*cj2*py*sj0*(pz*pz)))+(((-3.26400000408e+16)*sj2*(pz*pz*pz)))+(((1.74835584874178e+15)*py*sj0*(cj2*cj2)))+(((-299635201498176.0)*cj0*px*sj2*(cj2*cj2)))+(((246428160924106.0)*pz*sj2))+(((-1.40800000352e+16)*py*sj0*(pz*pz)))+(((1895731209478.66)*sj2))+(((-2.400000003e+15)*cj2*(pz*pz*pz)))+(((299095201121607.0)*pz*(cj2*cj2*cj2)))+(((-55756800278784.0)*py*sj0*sj2))+(((118539520592698.0)*py*sj0))+(((-81600000204000.0)*sj2*(pz*pz)))+(((780324483901622.0)*cj2*py*sj0))+(((118539520592698.0)*cj0*px))+(((2.400000006e+15)*py*sj0*sj2*(pz*pz)))+(((1.15088256431581e+15)*cj2*pz*sj2))+(((271677601018791.0)*pz*(cj2*cj2)))+(((-299635201498176.0)*py*sj0*sj2*(cj2*cj2)))+(((-540000002700.0)*cj0*px*(sj2*sj2*sj2)))+(((-59444098857220.5)*(cj2*cj2)))+(((-26531032452655.2)*cj2))+(((-258508801292544.0)*cj2*py*sj0*sj2))+(((18360000091.8)*(sj2*sj2*sj2)))+(((-3.26400000816e+16)*cj0*cj2*px*(pz*pz)))+(((1.74835584874178e+15)*cj0*px*(cj2*cj2)))+(((1.33631424668157e+15)*cj0*px*(cj2*cj2*cj2)))+(((-45434684387173.4)*(cj2*cj2*cj2)))+(((-258508801292544.0)*cj0*cj2*px*sj2))+(((1.34365824503872e+15)*pz*sj2*(cj2*cj2)))+(((-67044000251415.0)*pz))+(((8789299243946.5)*cj2*sj2))+(((7344000027540.0)*pz*(sj2*sj2*sj2)))+(((-55756800278784.0)*cj0*px*sj2))+(((-1.40800000352e+16)*cj0*px*(pz*pz)))+(((478720001196800.0)*(pz*pz)))+(((-94461600354231.0)*cj2*pz))+(((1.1097600027744e+15)*cj2*(pz*pz)))+(((780324483901622.0)*cj0*cj2*px))+(((-2.400000003e+15)*(pz*pz*pz)))+(((-540000002700.0)*py*sj0*(sj2*sj2*sj2)))+(((2.400000006e+15)*cj0*px*sj2*(pz*pz)))+(((1.33631424668157e+15)*py*sj0*(cj2*cj2*cj2)))+(((10187596850938.0)*sj2*(cj2*cj2)))))))+IKsqr(((x655.value)*(((696000.00174)+(((-2448000.00612)*(cj2*cj2)))+(((400000000.5)*cj0*px*pz))+(((-1752000.00438)*cj2))+(((400000000.5)*py*pz*sj0))+(((-16556400.041391)*cj2*sj2))+(((-7090800.017727)*sj2))+(((-13600000.017)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x654.value)*(((-4030343700151.72)+(((-3.26400000816e+16)*cj2*py*sj0*(pz*pz)))+(((-3.26400000408e+16)*sj2*(pz*pz*pz)))+(((1.74835584874178e+15)*py*sj0*(cj2*cj2)))+(((-299635201498176.0)*cj0*px*sj2*(cj2*cj2)))+(((246428160924106.0)*pz*sj2))+(((-1.40800000352e+16)*py*sj0*(pz*pz)))+(((1895731209478.66)*sj2))+(((-2.400000003e+15)*cj2*(pz*pz*pz)))+(((299095201121607.0)*pz*(cj2*cj2*cj2)))+(((-55756800278784.0)*py*sj0*sj2))+(((118539520592698.0)*py*sj0))+(((-81600000204000.0)*sj2*(pz*pz)))+(((780324483901622.0)*cj2*py*sj0))+(((118539520592698.0)*cj0*px))+(((2.400000006e+15)*py*sj0*sj2*(pz*pz)))+(((1.15088256431581e+15)*cj2*pz*sj2))+(((271677601018791.0)*pz*(cj2*cj2)))+(((-299635201498176.0)*py*sj0*sj2*(cj2*cj2)))+(((-540000002700.0)*cj0*px*(sj2*sj2*sj2)))+(((-59444098857220.5)*(cj2*cj2)))+(((-26531032452655.2)*cj2))+(((-258508801292544.0)*cj2*py*sj0*sj2))+(((18360000091.8)*(sj2*sj2*sj2)))+(((-3.26400000816e+16)*cj0*cj2*px*(pz*pz)))+(((1.74835584874178e+15)*cj0*px*(cj2*cj2)))+(((1.33631424668157e+15)*cj0*px*(cj2*cj2*cj2)))+(((-45434684387173.4)*(cj2*cj2*cj2)))+(((-258508801292544.0)*cj0*cj2*px*sj2))+(((1.34365824503872e+15)*pz*sj2*(cj2*cj2)))+(((-67044000251415.0)*pz))+(((8789299243946.5)*cj2*sj2))+(((7344000027540.0)*pz*(sj2*sj2*sj2)))+(((-55756800278784.0)*cj0*px*sj2))+(((-1.40800000352e+16)*cj0*px*(pz*pz)))+(((478720001196800.0)*(pz*pz)))+(((-94461600354231.0)*cj2*pz))+(((1.1097600027744e+15)*cj2*(pz*pz)))+(((780324483901622.0)*cj0*cj2*px))+(((-2.400000003e+15)*(pz*pz*pz)))+(((-540000002700.0)*py*sj0*(sj2*sj2*sj2)))+(((2.400000006e+15)*cj0*px*sj2*(pz*pz)))+(((1.33631424668157e+15)*py*sj0*(cj2*cj2*cj2)))+(((10187596850938.0)*sj2*(cj2*cj2)))))), ((x655.value)*(((696000.00174)+(((-2448000.00612)*(cj2*cj2)))+(((400000000.5)*cj0*px*pz))+(((-1752000.00438)*cj2))+(((400000000.5)*py*pz*sj0))+(((-16556400.041391)*cj2*sj2))+(((-7090800.017727)*sj2))+(((-13600000.017)*pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x656=IKsin(j1);
IkReal x657=IKcos(j1);
IkReal x658=cj0*cj0;
IkReal x659=px*px;
IkReal x660=py*py;
IkReal x661=((0.99999999875)*pz);
IkReal x662=((0.204)*sj2);
IkReal x663=(cj0*px);
IkReal x664=(py*sj0);
IkReal x665=((0.204)*cj2);
IkReal x666=((0.015)*cj2);
IkReal x667=((0.015)*sj2);
IkReal x668=((1.0)*x657);
IkReal x669=((0.015)*x656);
IkReal x670=((2.49999999375e-9)*x658);
IkReal x671=((0.03)*x657);
IkReal x672=(x656*x664);
evalcond[0]=((-0.088)+((x656*x663))+(((-1.0)*x657*x661))+(((-1.0)*x665))+(((-0.034)*x656))+x667+x672);
evalcond[1]=((0.015)+(((-1.0)*x663*x668))+(((0.034)*x657))+(((-1.0)*x656*x661))+x662+x666+(((-1.0)*x664*x668)));
evalcond[2]=(((x657*x667))+((x656*x666))+((x656*x662))+(((-0.088)*x657))+(((-1.0)*x657*x665))+(((-1.0)*x661))+x669);
evalcond[3]=((0.034)+(((0.015)*x657))+(((0.088)*x656))+((x657*x662))+((x657*x666))+((x656*x665))+(((-1.0)*x664))+(((-1.0)*x663))+(((-1.0)*x656*x667)));
evalcond[4]=((0.04231999997354)+((x660*x670))+(((-4.9999999875e-9)*x663*x664))+(((-0.005984)*x656))+(((0.176)*x672))+(((-1.0)*x659*x670))+((x664*x671))+(((0.176)*x656*x663))+(((0.068)*x664))+(((0.068)*x663))+(((0.0299999999625)*pz*x656))+(((-0.9999999975)*(pz*pz)))+(((-0.17599999978)*pz*x657))+(((-0.9999999975)*x659))+(((-1.0)*x660))+((x663*x671))+(((-0.00102)*x657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x673=py*py;
IkReal x674=cj0*cj0;
IkReal x675=((6000000.0075)*pz);
IkReal x676=(py*sj0);
IkReal x677=((81600000.204)*cj2);
IkReal x678=(cj0*px);
IkReal x679=((81600000.102)*pz);
IkReal x680=((81600000.204)*sj2);
IkReal x681=((6000000.015)*sj2);
IkReal x682=((6000000.015)*cj2);
IkReal x683=((400000001.0)*x674);
CheckValue<IkReal> x684=IKPowWithIntegerCheck(IKsign(((-462400.001156)+(((27200000.068)*x676))+(((27200000.068)*x678))+(((-1.0)*x683*(px*px)))+((x673*x683))+(((-400000001.0)*x673))+(((-800000002.0)*x676*x678))+(((-400000000.0)*(pz*pz))))),-1);
if(!x684.valid){
continue;
}
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(((1196800.002992)+((x678*x681))+(((2774400.006936)*cj2))+(((-204000.00051)*sj2))+((x676*x681))+(((-35200000.088)*x676))+(((-35200000.088)*x678))+(((-1.0)*x676*x677))+(((-1.0)*sj2*x679))+(((-1.0)*x677*x678))+(((-1.0)*x675))+(((-1.0)*cj2*x675)))),IkReal(((204000.00051)+((cj2*x679))+(((204000.00051)*cj2))+(((-1.0)*x678*x680))+(((-1.0)*x678*x682))+(((2774400.006936)*sj2))+(((-1.0)*sj2*x675))+(((35200000.044)*pz))+(((-1.0)*x676*x680))+(((-1.0)*x676*x682))+(((-6000000.015)*x676))+(((-6000000.015)*x678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x684.value)))+(x685.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x686=IKsin(j1);
IkReal x687=IKcos(j1);
IkReal x688=cj0*cj0;
IkReal x689=px*px;
IkReal x690=py*py;
IkReal x691=((0.99999999875)*pz);
IkReal x692=((0.204)*sj2);
IkReal x693=(cj0*px);
IkReal x694=(py*sj0);
IkReal x695=((0.204)*cj2);
IkReal x696=((0.015)*cj2);
IkReal x697=((0.015)*sj2);
IkReal x698=((1.0)*x687);
IkReal x699=((0.015)*x686);
IkReal x700=((2.49999999375e-9)*x688);
IkReal x701=((0.03)*x687);
IkReal x702=(x686*x694);
evalcond[0]=((-0.088)+(((-1.0)*x687*x691))+(((-0.034)*x686))+((x686*x693))+x697+(((-1.0)*x695))+x702);
evalcond[1]=((0.015)+(((0.034)*x687))+(((-1.0)*x693*x698))+x696+x692+(((-1.0)*x686*x691))+(((-1.0)*x694*x698)));
evalcond[2]=((((-1.0)*x687*x695))+((x687*x697))+((x686*x696))+((x686*x692))+(((-0.088)*x687))+x699+(((-1.0)*x691)));
evalcond[3]=((0.034)+(((0.088)*x686))+((x687*x696))+((x687*x692))+((x686*x695))+(((0.015)*x687))+(((-1.0)*x686*x697))+(((-1.0)*x693))+(((-1.0)*x694)));
evalcond[4]=((0.04231999997354)+(((0.0299999999625)*pz*x686))+(((-1.0)*x689*x700))+(((0.176)*x686*x693))+(((-0.9999999975)*x689))+(((0.176)*x702))+(((0.068)*x693))+(((0.068)*x694))+((x690*x700))+(((-0.9999999975)*(pz*pz)))+((x694*x701))+(((-0.17599999978)*pz*x687))+(((-0.00102)*x687))+(((-4.9999999875e-9)*x693*x694))+(((-0.005984)*x686))+((x693*x701))+(((-1.0)*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "8537c63c16e9776d1db31241b8c9bf76"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
